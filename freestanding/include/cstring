#ifndef _CSTRING_
#define _CSTRING_

#include <cdecl.h>
#include <cstddef_misc/size_ptrdiff.h>


#ifdef __cplusplus
namespace std {
#endif


_cdecl_begin

int memcmp(const void*, const void*, size_t) noexcept;
void* memchr(const void*, int, size_t) noexcept;
void* memcpy(void*, const void*, size_t) noexcept;
void* memmove(void*, const void*, size_t) noexcept;
void* memrchr(const void*, int, size_t) noexcept;
void* memset(void*, int, size_t) noexcept;
char* strcpy(char*, const char*) noexcept;
size_t strlen(const char*) noexcept;
const char* strerror(int) noexcept;
int strcmp(const char*, const char*) noexcept;
int strncmp(const char*, const char*, size_t) noexcept;
char* strdup(const char*) noexcept;
char* strcat(char*, const char*) noexcept;
char* strstr(const char*, const char*) noexcept;

_cdecl_end


#ifdef __cplusplus

inline namespace __1 {

using std::memcmp;
using std::memchr;
using std::memcpy;
using std::memmove;
using std::memrchr;
using std::memset;
using std::strcpy;
using std::strlen;
using std::strerror;
using std::strcmp;
using std::strncmp;
using std::strdup;
using std::strcat;
using std::strstr;

} /* namespace std::__1 */

} /* namespace std */

using std::memcmp;
using std::memchr;
using std::memcpy;
using std::memmove;
using std::memrchr;
using std::memset;
using std::strcpy;
using std::strlen;
using std::strerror;
using std::strcmp;
using std::strncmp;
using std::strdup;
using std::strcat;
using std::strstr;
#endif /* __cplusplus */

#endif /* _CSTRING_ */

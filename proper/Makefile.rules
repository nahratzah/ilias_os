COMPILER_FLAGS +=	-ffreestanding					\
			-nostdinc					\
			-fno-stack-protector				\
			-integrated-as					\
			-D_KERNEL=1					\
			-Wno-tautological-compare			\
			-Wno-c++1y-extensions				\
			-ftls-model=initial-exec

# Disable TLS for now, since clang has a code generation bug.
COMPILER_FLAGS +=	-D_SINGLE_THREADED=1

KERNEL_FLAGS +=		-O3
# Loader is always single threaded.
LOADER_FLAGS +=		-Os						\
			-D_SINGLE_THREADED=1

CFLAGS_32 +=		-target i386
CFLAGS_64 +=		-target amd64					\
			-mcmodel=large					\
			-mno-red-zone

CXXFLAGS +=		${COMPILER_FLAGS}				\
			-std=c++11
CFLAGS +=		${COMPILER_FLAGS}
LDFLAGS +=		-nostdlib					\
			-nodefaultlibs
TEST_COMPILER_FLAGS +=	-integrated-as					\
			-O3						\
			-Wno-tautological-compare			\
			-Wno-c++1y-extensions				\
			-fno-builtin					\
			-D_TEST=1					\
			-D_SINGLE_THREADED=1				\
			-ftls-model=initial-exec
TEST_CFLAGS +=		${TEST_COMPILER_FLAGS}
TEST_CXXFLAGS +=	${TEST_COMPILER_FLAGS}				\
			-std=c++11
TEST_LDFLAGS +=		

AS ?= as
CC ?= clang
CXX ?= clang++
LD ?= ld
GZIP ?= gzip
OBJCOPY ?= objcopy
RM ?= rm

.SUFFIXES: .ok .testlog .test .o_test .o32 .o64 .ol .cc .cpp .c .s .S .kernel .kgz .kgzo
.PHONY: loader clean cleandir test clean_test testbin retest do_test check recheck

OBJS_32 += $(addsuffix .o32, $(basename ${SRCS}))
OBJS_64 += $(addsuffix .o64, $(basename ${SRCS}))
OBJS_32 += $(addsuffix .o32, $(basename ${SRCS_32}))
OBJS_64 += $(addsuffix .o64, $(basename ${SRCS_64}))
OBJS_LOADER += $(addsuffix .ol, $(basename ${SRCS_LOADER}))
OBJS_TEST += $(addsuffix .o_test, $(basename ${SRCS}))
OBJS_TEST += $(addsuffix .o_test, $(basename ${TEST}))
BIN_TEST += $(addsuffix .test, $(basename ${TEST}))
LOG_TEST += $(addsuffix .testlog, $(basename ${TEST}))
OK_TEST += $(addsuffix .ok, $(basename ${TEST}))

clean_test:
	${RM} -f ${LOG_TEST} ${OK_TEST}

clean: clean_test
	${RM} -f ${OBJS_32} ${OBJS_64} ${OBJS_LOADER} ${CLEAN_FILES} ${OBJS_TEST} ${BIN_TEST}

# .ifnmake clean
# . for o in ${OBJS_32} ${OBJS_64} ${OBJS_LOADER} ${OBJS_TEST}
# .  if exists(${o}.d)
# .   include "${o}.d"
# .  elif exists($o)
#     .PHONY: $o
# .  endif
# . endfor
# .endif

DEP_FILES = $(addsuffix .d, ${OBJS_32} ${OBJS_64} ${OBJS_LOADER} ${OBJS_TEST})
include $(wildcard ${DEP_FILES})  # Only include dependancies that already exist.

cleandir: clean
	${RM} -f ${DEP_FILES}

do_test: ${OK_TEST}

test: testbin do_test

testbin: ${BIN_TEST}

retest: clean_test
	@${MAKE} test

check: test

recheck: retest


# Build rules for compilation of loader objects.
.cc.ol:
	${CXX} ${CFLAGS_32} ${CFLAGS_LOADER} ${CXXFLAGS} ${LOADER_FLAGS} ${INCLUDES} ${INCLUDES_LOADER} -MD -MP -MF $@.d -o $@ -c $<
.cpp.ol:
	${CXX} ${CFLAGS_32} ${CFLAGS_LOADER} ${CXXFLAGS} ${LOADER_FLAGS} ${INCLUDES} ${INCLUDES_LOADER} -MD -MP -MF $@.d -o $@ -c $<
.c.ol:
	${CC} ${CFLAGS_32} ${CFLAGS_LOADER} ${CFLAGS} ${LOADER_FLAGS} ${INCLUDES} ${INCLUDES_LOADER} -MD -MP -MF $@.d -o $@ -c $<
.s.ol:
	${CC} ${CFLAGS_32} ${CFLAGS_LOADER} ${CFLAGS} ${LOADER_FLAGS} ${INCLUDES} ${INCLUDES_LOADER} -o $@ -c $<
.S.ol:
	${CC} ${CFLAGS_32} ${CFLAGS_LOADER} ${CFLAGS} ${LOADER_FLAGS} ${INCLUDES} ${INCLUDES_LOADER} -MD -MP -MF $@.d -o $@ -c $<

# Rules for compiling 32/64-bit objects (the actual kernel).
.cc.o32:
	${CXX} ${CFLAGS_32} ${CXXFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.cc.o64:
	${CXX} ${CFLAGS_64} ${CXXFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.cpp.o32:
	${CXX} ${CFLAGS_32} ${CXXFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.cpp.o64:
	${CXX} ${CFLAGS_64} ${CXXFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.c.o32:
	${CC} ${CFLAGS_32} ${CFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.c.o64:
	${CC} ${CFLAGS_64} ${CFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.s.o32:
	${CC} ${CFLAGS_32} ${CFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -o $@ -c $<
.s.o64:
	${CC} ${CFLAGS_64} ${CFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -o $@ -c $<
.S.o32:
	${CC} ${CFLAGS_32} ${CFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.S.o64:
	${CC} ${CFLAGS_64} ${CFLAGS} ${KERNEL_FLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.kernel.kgz:
	${GZIP} -9 -c $< > $@
.kgz.kgzo:
	${OBJCOPY} --input-target binary --output-target elf32-i386 --binary-architecture i386 $< $@

# Rules for compiling test objects.
.c.o_test:
	${CC} ${TEST_CFLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.cc.o_test:
	${CXX} ${TEST_CXXFLAGS} ${INCLUDES} -MD -MP -MF $@.d -o $@ -c $<
.test.ok:
	@rm -f $@
	@./$< > ${@:.test=.testlog} 2>&1 && ( touch $@ && echo "SUCCESS $@" ) || echo "FAIL    $@"
.o_test.test:
	${CXX} ${TEST_LDFLAGS} -o $@ $^

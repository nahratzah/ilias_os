#ifndef _BITSET_
#define _BITSET_

#include <cdecl.h>
#include <string>
#include <iosfwd>

_namespace_begin(std)


template<size_t> class bitset;

template<size_t N>
constexpr bitset<N> operator&(const bitset<N>&, const bitset<N>&) noexcept;
template<size_t N>
constexpr bitset<N> operator|(const bitset<N>&, const bitset<N>&) noexcept;
template<size_t N>
constexpr bitset<N> operator^(const bitset<N>&, const bitset<N>&) noexcept;

template<typename Char, typename Traits, size_t N>
basic_istream<Char, Traits> operator>>(basic_istream<Char, Traits>&,
                                       bitset<N>&);
template<typename Char, typename Traits, size_t N>
basic_ostream<Char, Traits> operator<<(basic_ostream<Char, Traits>&,
                                       const bitset<N>&);


template<size_t N>
class bitset {
  static_assert(N > 0, "bitset with zero bits");

  template<size_t M> friend constexpr bitset<M> operator&(const bitset<M>&,
                                                          const bitset<M>&)
      noexcept;
  template<size_t M> friend constexpr bitset<M> operator|(const bitset<M>&,
                                                          const bitset<M>&)
      noexcept;
  template<size_t M> friend constexpr bitset<M> operator^(const bitset<M>&,
                                                          const bitset<M>&)
      noexcept;

 private:
  using int_type = unsigned long long;

  static constexpr size_t N_int_type =
      (N + numeric_limits<int_type>::digits - 1U) /
      numeric_limits<int_type>::digits;

 public:
  class reference {
    friend class bitset;

   private:
    reference() noexcept = default;

   public:
    ~reference() noexcept = default;
    reference& operator=(bool) noexcept;
    reference& operator=(const reference&) noexcept;
    bool operator~() const noexcept;
    operator bool() const noexcept;
    reference& flip() noexcept;

   private:
    int_type* ptr_ = nullptr;
    int_type msk_ = 1;
  };

 private:
  struct init_tag {};
  struct invert_tag {
    static constexpr int_type op(const int_type& x) noexcept { return ~x; }
  };
  struct and_tag {
    static constexpr int_type op(const int_type& x, const int_type& y)
        noexcept;
  };
  struct or_tag {
    static constexpr int_type op(const int_type& x, const int_type& y)
        noexcept;
  };
  struct xor_tag {
    static constexpr int_type op(const int_type& x, const int_type& y)
        noexcept;
  };

  template<typename... T>
  constexpr bitset(enable_if_t<sizeof...(T) == N_int_type, init_tag>,
                   T&&... v)
      noexcept;
  template<typename... T>
  constexpr bitset(enable_if_t<sizeof...(T) < N_int_type, init_tag>,
                   T&&... v)
      noexcept;

  template<size_t... Indices>
  constexpr bitset(invert_tag, int_type[N_int_type],
                   index_sequence<Indices...> =
                       make_index_sequence<N_int_type>()) noexcept;

  template<size_t... Indices>
  constexpr bitset(and_tag, const bitset&, const bitset&,
                   index_sequence<Indices...> =
                       make_index_sequence<N_int_type>()) noexcept;
  template<size_t... Indices>
  constexpr bitset(or_tag, const bitset&, const bitset&,
                   index_sequence<Indices...> =
                       make_index_sequence<N_int_type>()) noexcept;
  template<size_t... Indices>
  constexpr bitset(xor_tag, const bitset&, const bitset&,
                   index_sequence<Indices...> =
                       make_index_sequence<N_int_type>()) noexcept;

 public:
  constexpr bitset() noexcept;
  constexpr bitset(unsigned long long) noexcept;

  template<typename Char, typename Traits, typename Alloc>
  explicit bitset(const basic_string<Char, Traits, Alloc>&,
                  typename basic_string<Char, Traits, Alloc>::size_type = 0,
                  typename basic_string<Char, Traits, Alloc>::size_type =
                      basic_string<Char, Traits, Alloc>::npos,
                  Char = Char('0'), Char = Char('1'));

  template<typename Char>
  explicit bitset(const Char*,
                  typename basic_string<Char>::size_type =
                      basic_string<Char>::npos,
                  Char = Char('0'), Char = Char('1'));

  template<typename Char, typename Traits>
  explicit bitset(basic_string_ref<Char, Traits>,
                  Char = Char('0'), Char = Char('1'));

  bitset& operator&=(const bitset&) noexcept;
  bitset& operator|=(const bitset&) noexcept;
  bitset& operator^=(const bitset&) noexcept;
  bitset& operator<<=(size_t) noexcept;
  bitset& operator>>=(size_t) noexcept;
  bitset& set() noexcept;
  bitset& set(size_t, bool = true);
  bitset& reset() noexcept;
  bitset& reset(size_t);
  constexpr bitset operator~() const noexcept;
  bitset& flip() noexcept;
  bitset& flip(size_t);

  constexpr bool operator[](size_t) const;
  reference operator[](size_t);

  unsigned long to_ulong() const;
  unsigned long long to_ullong() const;

  template<typename Char, typename Traits = char_traits<Char>,
           typename Alloc = allocator<Char>>
  basic_string<Char, Traits, Alloc> to_string(Char = Char('0'),
                                              Char = Char('1')) const;

  size_t count() const noexcept;
  constexpr size_t size() const noexcept;
  bool operator==(const bitset&) const noexcept;
  bool operator!=(const bitset&) const noexcept;

  bool test(size_t) const;
  bool all() const noexcept;
  bool any() const noexcept;
  bool none() const noexcept;

  bitset operator<<(size_t) const noexcept;
  bitset operator>>(size_t) const noexcept;

 private:
  using data_type = int_type[N_int_type];

  data_type data_;
};


_namespace_end(std)

#include <bitset-inl.h>

#endif /* _BITSET_ */

#ifndef _CHRONO_
#define _CHRONO_

#include <cdecl.h>
#include <ratio>
#include <limits>
#include <type_traits>
#include <stdimpl/gcd.h>
#include <stdimpl/member_check.h>
#include <stdimpl/implicitly_convertible.h>
#include <ctime>

#pragma GCC system_header

_namespace_begin(std)
namespace chrono {

template<typename Rep, typename Period = ratio<1>>
class duration;
template<typename Clock, typename Duration = typename Clock::duration>
class time_point;

} /* namespace std::chrono */

namespace impl {

template<typename>
struct is_duration : false_type {};
template<typename Rep, typename Period>
struct is_duration<chrono::duration<Rep, Period>> : true_type {};

template<typename>
struct is_ratio : false_type {};
template<intmax_t N, intmax_t D>
struct is_ratio<ratio<N, D>> : true_type {};

} /* namespace std::impl */


template<typename Rep1, typename Period1, typename Rep2, typename Period2>
struct common_type<chrono::duration<Rep1, Period1>,
                   chrono::duration<Rep2, Period2>> {
  using type = chrono::duration<common_type_t<Rep1, Rep2>,
                                typename ratio<impl::gcd(Period1::num,
                                                         Period2::num),
                                               impl::lcm(Period1::den,
                                                         Period2::den)>::type>;
};

template<typename Clock, typename Duration1, typename Duration2>
struct common_type<chrono::time_point<Clock, Duration1>,
                   chrono::time_point<Clock, Duration2>> {
  using type = chrono::time_point<Clock, common_type_t<Duration1, Duration2>>;
};


namespace chrono {


template<typename Rep> struct treat_as_floating_point
: is_floating_point<Rep> {};

template<typename Rep> struct duration_values {
  static constexpr Rep zero() { return Rep(0); }
  static constexpr Rep min() { return numeric_limits<Rep>::lowest(); }
  static constexpr Rep max() { return numeric_limits<Rep>::max(); }
};


template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr auto operator+(const duration<Rep1, Period1>&,
                         const duration<Rep2, Period2>&) ->
    common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>;

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr auto operator-(const duration<Rep1, Period1>&,
                         const duration<Rep2, Period2>&) ->
    common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>;

template<typename Rep1, typename Period, typename Rep2>
constexpr auto operator*(const duration<Rep1, Period>&, const Rep2&) ->
    enable_if_t<impl::implicitly_convertible<common_type_t<Rep1, Rep2>,
                                             Rep2>::value,
                duration<common_type_t<Rep1, Rep2>, Period>>;

template<typename Rep1, typename Rep2, typename Period>
constexpr auto operator*(const Rep1&, const duration<Rep2, Period>&) ->
    enable_if_t<impl::implicitly_convertible<common_type_t<Rep1, Rep2>,
                                             Rep1>::value,
                duration<common_type_t<Rep1, Rep2>, Period>>;

template<typename Rep1, typename Period, typename Rep2>
constexpr auto operator/(const duration<Rep1, Period>&, const Rep2&) ->
    enable_if_t<impl::implicitly_convertible<common_type_t<Rep1, Rep2>,
                                             Rep2>::value &&
                !impl::is_duration<Rep2>::value,
                duration<common_type_t<Rep1, Rep2>, Period>>;

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr auto operator/(const duration<Rep1, Period1>&,
                         const duration<Rep2, Period2>&) ->
    common_type_t<Rep1, Rep2>;

template<typename Rep1, typename Period, typename Rep2>
constexpr auto operator%(const duration<Rep1, Period>&, const Rep2&) ->
    enable_if_t<impl::implicitly_convertible<common_type_t<Rep1, Rep2>,
                                             Rep2>::value &&
                !impl::is_duration<Rep2>::value,
                duration<common_type_t<Rep1, Rep2>, Period>>;

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr auto operator%(const duration<Rep1, Period1>&,
                         const duration<Rep2, Period2>&) ->
    common_type_t<duration<Rep1, Period1>, duration<Rep2, Period2>>;


template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr bool operator==(const duration<Rep1, Period1>&,
                          const duration<Rep2, Period2>&);

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr bool operator!=(const duration<Rep1, Period1>&,
                          const duration<Rep2, Period2>&);

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr bool operator<(const duration<Rep1, Period1>&,
                         const duration<Rep2, Period2>&);

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr bool operator<=(const duration<Rep1, Period1>&,
                          const duration<Rep2, Period2>&);

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr bool operator>(const duration<Rep1, Period1>&,
                         const duration<Rep2, Period2>&);

template<typename Rep1, typename Period1, typename Rep2, typename Period2>
constexpr bool operator>=(const duration<Rep1, Period1>&,
                          const duration<Rep2, Period2>&);


template<typename ToDuration, typename Rep, typename Period>
constexpr auto duration_cast(const duration<Rep, Period>&) ->
    enable_if_t<impl::is_duration<ToDuration>::value, ToDuration>;


using nanoseconds  = duration<int_least64_t, nano>;         // At least 64 bits
using microseconds = duration<int_least64_t, micro>;        // At least 55 bits
using milliseconds = duration<int_least64_t, milli>;        // At least 45 bits
using seconds      = duration<int_least64_t>;               // At least 35 bits
using minutes      = duration<int_least32_t, ratio<60>>;    // At least 29 bits
using hours        = duration<int_least32_t, ratio<3600>>;  // At least 23 bits


template<typename Clock, typename Duration1, typename Rep2, typename Period2>
constexpr auto operator+(const time_point<Clock, Duration1>&,
                         const duration<Rep2, Period2>&) ->
    time_point<Clock, common_type_t<Duration1, duration<Rep2, Period2>>>;

template<typename Rep1, typename Period1, typename Clock, typename Duration2>
constexpr auto operator+(const duration<Rep1, Period1>&,
                         const time_point<Clock, Duration2>&) ->
    time_point<Clock, common_type_t<duration<Rep1, Period1>, Duration2>>;

template<typename Clock, typename Duration1, typename Rep2, typename Period2>
constexpr auto operator-(const time_point<Clock, Duration1>&,
                         const duration<Rep2, Period2>&) ->
    time_point<Clock, common_type_t<Duration1, duration<Rep2, Period2>>>;

template<typename Clock, typename Duration1, typename Duration2>
constexpr auto operator-(const time_point<Clock, Duration1>&,
                         const time_point<Clock, Duration2>&) ->
    common_type_t<Duration1, Duration2>;


template<typename Clock, typename Duration1, typename Duration2>
constexpr bool operator==(const time_point<Clock, Duration1>&,
                          const time_point<Clock, Duration2>&);

template<typename Clock, typename Duration1, typename Duration2>
constexpr bool operator!=(const time_point<Clock, Duration1>&,
                          const time_point<Clock, Duration2>&);

template<typename Clock, typename Duration1, typename Duration2>
constexpr bool operator<(const time_point<Clock, Duration1>&,
                         const time_point<Clock, Duration2>&);

template<typename Clock, typename Duration1, typename Duration2>
constexpr bool operator<=(const time_point<Clock, Duration1>&,
                          const time_point<Clock, Duration2>&);

template<typename Clock, typename Duration1, typename Duration2>
constexpr bool operator>(const time_point<Clock, Duration1>&,
                         const time_point<Clock, Duration2>&);

template<typename Clock, typename Duration1, typename Duration2>
constexpr bool operator>=(const time_point<Clock, Duration1>&,
                          const time_point<Clock, Duration2>&);


template<typename ToDuration, typename Clock, typename Duration>
constexpr auto time_point_cast(const time_point<Clock, Duration>&) ->
    enable_if_t<impl::is_duration<ToDuration>::value,
                time_point<Clock, ToDuration>>;


class system_clock {
 public:
  using rep = int64_t;
  using period = milli;
  using duration = chrono::duration<rep, period>;
  using time_point = chrono::time_point<system_clock>;

  static const bool is_steady = false;
  static time_point now();  // XXX decide if noexcept

  static time_t to_time_t(const time_point&) noexcept;
  static time_point from_time_t(time_t) noexcept;
};

class steady_clock {
 public:
  using rep = int64_t;
  using period = milli;
  using duration = chrono::duration<rep, period>;
  using time_point = chrono::time_point<steady_clock>;

  static const bool is_steady = true;
  static time_point now();  // XXX decide if noexcept
};

class high_resolution_clock {
 public:
  using rep = int64_t;
  using period = nano;
  using duration = chrono::duration<rep, period>;
  using time_point = chrono::time_point<high_resolution_clock>;

  static const bool is_steady = false;
  static time_point now();  // XXX decide if noexcept
};


template<typename Rep, typename Period>
class duration {
 public:
  using rep = Rep;
  using period = Period;

  constexpr duration() = default;
  duration(const duration&) = default;
  duration& operator=(const duration&) = default;

  template<typename Rep2, typename =
      enable_if_t<impl::implicitly_convertible<rep, Rep2>::value &&
                  (treat_as_floating_point<rep>::value ||
                   !treat_as_floating_point<Rep2>::value),
                  void>>
  constexpr explicit duration(const Rep2& r)
  : rep_(r) {}

  template<typename Rep2, typename Period2,
           typename = enable_if_t<treat_as_floating_point<rep>::value ||
                                  (ratio_divide<Period2, period>::den == 1 &&
                                   !treat_as_floating_point<Rep2>::value),
                                  void>>
  constexpr duration(const duration<Rep2, Period2>& d)
  : rep_(duration_cast<duration>(d).count()) {}

  ~duration() noexcept = default;

  constexpr rep count() const;

  constexpr duration operator+() const;
  constexpr duration operator-() const;
  duration& operator++();
  duration operator++(int);
  duration& operator--();
  duration operator--(int);

  duration& operator+=(const duration&);
  duration& operator-=(const duration&);

  duration& operator*=(const rep&);
  duration& operator/=(const rep&);
  duration& operator%=(const rep&);
  duration& operator%=(const duration&);

  static constexpr duration zero();
  static constexpr duration min();
  static constexpr duration max();

  static_assert(!impl::is_duration<rep>::value, "rep may not be a duration");
  static_assert(impl::is_ratio<period>::value, "period must be a ratio");
  static_assert(period::num > 0, "period must be positive");

 private:
  rep rep_;
};


template<typename Clock, typename Duration>
class time_point {
 public:
  using clock = Clock;
  using duration = Duration;
  using rep = typename duration::rep;
  using period = typename duration::period;

  constexpr time_point();
  constexpr explicit time_point(const duration&);

  template<typename Duration2, typename =
      enable_if_t<impl::implicitly_convertible<duration, Duration2>::value,
                  void>>
  constexpr time_point(const time_point<clock, Duration2>&);

  constexpr duration time_since_epoch() const;

  time_point& operator+=(const duration&);
  time_point& operator-=(const duration&);

  static constexpr time_point min();
  static constexpr time_point max();

  static_assert(impl::is_duration<Duration>::value,
                "duration argument must be a duration");

 private:
  duration d_;
};


} /* namespace chrono */


inline namespace literals {
inline namespace chrono_literals {


constexpr auto operator"" h(unsigned long long) -> chrono::hours;
constexpr auto operator"" h(long double) ->
    chrono::duration<long double, ratio<3600, 1>>;
constexpr auto operator"" min(unsigned long long) -> chrono::minutes;
constexpr auto operator"" min(long double) ->
    chrono::duration<long double, ratio<60, 1>>;
constexpr auto operator"" s(unsigned long long) -> chrono::seconds;
constexpr auto operator"" s(long double) ->
    chrono::duration<long double>;
constexpr auto operator"" ms(unsigned long long) -> chrono::milliseconds;
constexpr auto operator"" ms(long double) ->
    chrono::duration<long double, milli>;
constexpr auto operator"" us(unsigned long long) -> chrono::microseconds;
constexpr auto operator"" us(long double) ->
    chrono::duration<long double, micro>;
constexpr auto operator"" ns(unsigned long long) -> chrono::nanoseconds;
constexpr auto operator"" ns(long double) ->
    chrono::duration<long double, nano>;


}} /* namespace std::literals::chrono_literals */
_namespace_end(std)

#include <chrono-inl.h>

#endif /* _CHRONO_ */

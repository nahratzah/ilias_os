#ifndef _CSTRING_
#define _CSTRING_

#include <cstddef_misc/null.h>
#include <cstddef_misc/size_ptrdiff.h>
#include <cstdio_misc/eof.h>
#include <locale_misc/locale_t.h>
#include <cdecl.h>

_namespace_begin(std)
_cdecl_begin

void*  memccpy(void*__restrict, const void*__restrict, int, size_t) noexcept
           __attribute__((nonnull));
int    memcmp(const void*, const void*, size_t) noexcept
           __attribute__((nonnull));
void*  memcpy(void*__restrict, const void*__restrict, size_t) noexcept
           __attribute__((nonnull));
void*  memmove(void*, const void*, size_t) noexcept
           __attribute__((nonnull));
void*  memset(void*, int, size_t) noexcept
           __attribute__((nonnull));
char*  stpcpy(char*__restrict, const char*__restrict) noexcept
           __attribute__((nonnull));
char*  stpncpy(char*__restrict, const char*__restrict) noexcept
           __attribute__((nonnull));
char*  strcat(char*__restrict, const char*__restrict) noexcept
           __attribute__((nonnull));
int    strcmp(const char*, const char*) noexcept
           __attribute__((nonnull));
char*  strcpy(char*__restrict, const char*__restrict) noexcept
           __attribute__((nonnull));
size_t strcspn(const char*, const char*) noexcept
           __attribute__((nonnull));
char*  strdup(const char*) noexcept
           __attribute__((nonnull, malloc));
char*  strerror(int) noexcept;
int    strerror_r(int, char*, size_t) noexcept;
size_t strlen(const char*) noexcept;
size_t strlcat(char*, const char*, size_t) noexcept
           __attribute__((nonnull));
size_t strlcpy(char*, const char*, size_t) noexcept
           __attribute__((nonnull));
char*  strncat(char*__restrict, const char*__restrict, size_t) noexcept
           __attribute__((nonnull));
int    strncmp(const char*, const char*, size_t) noexcept
           __attribute__((nonnull));
char*  strncpy(char*__restrict, const char*__restrict, size_t) noexcept
           __attribute__((nonnull));
char*  strndup(const char*, size_t) noexcept
           __attribute__((nonnull));
size_t strnlen(const char*, size_t) noexcept
           __attribute__((nonnull));
size_t strspn(const char*, const char*) noexcept
           __attribute__((nonnull));
char*  strtok(char*__restrict, const char*__restrict) noexcept
           __attribute__((nonnull));
char*  strtok_r(char*__restrict, const char*__restrict, char**__restrict)
           noexcept
           __attribute__((nonnull));
void   bcopy(const void*, void*, size_t) noexcept
           __attribute__((nonnull));
void   bzero(void*, size_t) noexcept
           __attribute__((nonnull));

#ifdef __cplusplus
# define __cpp_const const
#else
# define __cpp_const /**/
#endif /* __cplusplus ... else */

__cpp_const char* strchr(const char*, int) noexcept
                      __attribute__((nonnull));
__cpp_const char* strpbrk(const char*, const char*) noexcept
                      __attribute__((nonnull));
__cpp_const char* strrchr(const char*, int) noexcept
                      __attribute__((nonnull));
__cpp_const char* strstr(const char*, const char*) noexcept
                      __attribute__((nonnull));
__cpp_const void* memchr(const void*, int, size_t) noexcept
                      __attribute__((nonnull));
__cpp_const void* memrchr(const void*, int, size_t) noexcept
                      __attribute__((nonnull));

#ifdef __cplusplus
_cdecl_end

inline char* strchr(char* s_, int c) noexcept {
  const char* s = s_;
  return const_cast<char*>(strchr(s, c));
}
inline char* strpbrk(char* s_, const char* c) noexcept {
  const char* s = s_;
  return const_cast<char*>(strpbrk(s, c));
}
inline char* strrchr(char* s_, int c) noexcept {
  const char* s = s_;
  return const_cast<char*>(strrchr(s, c));
}
inline char* strstr(char* s_, const char* c) noexcept {
  const char* s = s_;
  return const_cast<char*>(strstr(s, c));
}
inline void* memchr(void* p_, int c, size_t n) noexcept {
  const void* p = p_;
  return const_cast<void*>(memchr(p, c, n));
}
inline void* memrchr(void* p_, int c, size_t n) noexcept {
  const void* p = p_;
  return const_cast<void*>(memrchr(p, c, n));
}

_cdecl_begin
#endif

#undef __cpp_const

/* These functions require working locale support. */
int    strcoll(const char*, const char*) noexcept
           __attribute__((nonnull));
int    strcoll_l(const char*, const char*, locale_t) noexcept
           __attribute__((nonnull));
char*  strerror_l(int, locale_t) noexcept
           __attribute__((nonnull));
char*  strsignal(int) noexcept;
size_t strxfrm(char*__restrict, const char*__restrict, size_t) noexcept
           __attribute__((nonnull));
size_t strxfrm_l(char*__restrict, const char*__restrict, size_t, locale_t)
         noexcept;

_cdecl_end
_namespace_end(std)

#if !defined(_TEST) && defined(__cplusplus)
using std::memccpy;
using std::memchr;
using std::memrchr;
using std::memcmp;
using std::memcpy;
using std::memmove;
using std::memset;
using std::stpcpy;
using std::stpncpy;
using std::strcat;
using std::strchr;
using std::strcmp;
using std::strcpy;
using std::strcspn;
using std::strdup;
using std::strerror;
using std::strerror_r;
using std::strlen;
using std::strlcat;
using std::strlcpy;
using std::strncat;
using std::strncmp;
using std::strncpy;
using std::strndup;
using std::strnlen;
using std::strpbrk;
using std::strrchr;
using std::strspn;
using std::strstr;
using std::strtok;
using std::strtok_r;
using std::bcopy;

/* These functions require working locale support. */
using std::strcoll;
using std::strcoll_l;
using std::strerror_l;
using std::strsignal;
using std::strxfrm;
using std::strxfrm_l;
#endif /* !_TEST && __cplusplus */

#endif /* _CSTRING_ */

#ifndef _STDEXCEPT_
#define _STDEXCEPT_

#include <cdecl.h>
#include <exception>
#include <iosfwd>  // Forward decl of std::string.
#include <abi/ext/c_string_ptr.h>

_namespace_begin(std)


class logic_error
: public exception
{
 public:
  explicit logic_error(string_ref);
  explicit logic_error(const string&);
  explicit logic_error(const char*);

  logic_error(const logic_error&) noexcept;
  logic_error& operator=(const logic_error&) noexcept;

  ~logic_error() noexcept override;
  const char* what() const noexcept override;

 private:
  abi::ext::c_string_ptr msg_;
};

class domain_error
: public logic_error {
 public:
  explicit domain_error(string_ref);
  explicit domain_error(const string&);
  explicit domain_error(const char*);

  ~domain_error() noexcept override;
};
class invalid_argument
: public logic_error {
 public:
  explicit invalid_argument(string_ref);
  explicit invalid_argument(const string&);
  explicit invalid_argument(const char*);

  ~invalid_argument() noexcept override;
};
class length_error
: public logic_error {
 public:
  explicit length_error(string_ref);
  explicit length_error(const string&);
  explicit length_error(const char*);

  ~length_error() noexcept override;
};
class out_of_range
: public logic_error {
 public:
  explicit out_of_range(string_ref);
  explicit out_of_range(const string&);
  explicit out_of_range(const char*);

  ~out_of_range() noexcept override;
};

class runtime_error
: public exception {
 public:
  explicit runtime_error(string_ref);
  explicit runtime_error(const string&);
  explicit runtime_error(const char*);

  runtime_error(const runtime_error&) noexcept;
  runtime_error& operator=(const runtime_error&) noexcept;

  ~runtime_error() noexcept override;
  const char* what() const noexcept override;

 private:
  abi::ext::c_string_ptr msg_;
};

class range_error
: public runtime_error {
 public:
  explicit range_error(string_ref);
  explicit range_error(const string&);
  explicit range_error(const char*);

  ~range_error() noexcept override;
};
class overflow_error
: public runtime_error {
 public:
  explicit overflow_error(string_ref);
  explicit overflow_error(const string&);
  explicit overflow_error(const char*);

  ~overflow_error() noexcept override;
};
class underflow_error
: public runtime_error {
 public:
  explicit underflow_error(string_ref);
  explicit underflow_error(const string&);
  explicit underflow_error(const char*);

  ~underflow_error() noexcept override;
};


_namespace_end(std)

#endif /* _STDEXCEPT_ */

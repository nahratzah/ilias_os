#ifndef _INITIALIZER_LIST_
#define _INITIALIZER_LIST_

#include <cdecl.h>
#include <cstddef>

_namespace_begin(std)


template<typename E> class initializer_list {
 public:
  using value_type = E;
  using reference = value_type&;
  using const_reference = const value_type&;
  using size_type = size_t;
  using iterator = const value_type*;
  using const_iterator = const value_type*;

  const E* begin_ = nullptr;
  size_type sz_ = 0;

  initializer_list() = default;
  constexpr initializer_list(const value_type*, size_type);

  inline size_type size() const noexcept;
  inline bool empty() const noexcept;
  inline const_iterator begin() const noexcept;
  inline const_iterator end() const noexcept;
  inline iterator begin() noexcept;
  inline iterator end() noexcept;
};

template<typename E>
inline typename initializer_list<E>::iterator begin(initializer_list<E>&)
    noexcept;
template<typename E>
inline typename initializer_list<E>::iterator end(initializer_list<E>&)
    noexcept;

template<typename E>
inline typename initializer_list<E>::const_iterator begin(
    const initializer_list<E>&) noexcept;
template<typename E>
inline typename initializer_list<E>::const_iterator end(
    const initializer_list<E>&) noexcept;


_namespace_end(std)

#include <initializer_list-inl.h>

#endif /* _INITIALIZER_LIST_ */

#ifndef _DEQUE_
#define _DEQUE_

#include <cdecl.h>
#include <memory>
#include <type_traits>
#include <initializer_list>
#include <stdimpl/alloc_base.h>
#include <stdimpl/circular_buffer.h>
#include <ilias/cast_iterator.h>
#include <ilias/nested_iterator.h>
#include <ilias/ptrderef_iterator.h>

_namespace_begin(std)
namespace impl {


template<bool, typename Outer>
struct deque_storage_iterator {
  using type = Outer;
};
template<typename Outer>
struct deque_storage_iterator<true, Outer> {
  using type = _namespace(ilias)::nested_iterator<Outer>;
};

template<size_t TSize, size_t TAlign, typename Alloc>
struct deque_storage_defn {
  using using_blocks = integral_constant<bool, TSize <= 512>;
  static constexpr size_t n_items = (using_blocks::value ? 8192U / TSize : 1U);

  using elem = aligned_storage_t<TSize, TAlign>;
  using elem_type = conditional_t<using_blocks::value,
                                  array<elem, n_items>,
                                  elem>;
  using allocator_type =
      typename allocator_traits<Alloc>::template rebind_alloc<elem_type>;
  using data_type = circular_buffer<
      void*,
      typename allocator_traits<Alloc>::template rebind_alloc<void*>>;

  using data_ptr_iterator =
      _namespace(ilias)::cast_iterator<typename data_type::iterator,
                                       elem_type*,
                                       _namespace(ilias)::static_cast_style,
                                       void,
                                       elem_type*>;
  using const_data_ptr_iterator =
      _namespace(ilias)::cast_iterator<typename data_type::const_iterator,
                                       const elem_type*,
                                       _namespace(ilias)::static_cast_style,
                                       void,
                                       const elem_type*>;

  using data_iterator =
      _namespace(ilias)::ptrderef_iterator<data_ptr_iterator>;
  using const_data_iterator =
      _namespace(ilias)::ptrderef_iterator<const_data_ptr_iterator>;

  using iterator =
      typename deque_storage_iterator<using_blocks::value,
                                      data_iterator>::type;
  using const_iterator =
      typename deque_storage_iterator<using_blocks::value,
                                      const_data_iterator>::type;
};

template<size_t TSize, size_t TAlign, typename Alloc>
class deque_storage_base
: private alloc_base<
      typename deque_storage_defn<TSize, TAlign, Alloc>::allocator_type>
{
 private:
  using defn_ = deque_storage_defn<TSize, TAlign, Alloc>;
  using alloc_base = alloc_base<typename defn_::allocator_type>;
  using data_type = typename defn_::data_type;
  using elem_type = typename defn_::elem_type;

 public:
  using allocator_type = typename alloc_base::allocator_type;
  using value_type = typename defn_::elem;
  using reference_type = value_type&;
  using const_reference_type = const value_type&;
  using pointer = value_type*;
  using const_pointer = const value_type*;

  template<typename T> using iterator = _namespace(ilias)::cast_iterator<
      typename defn_::iterator,
      T,
      _namespace(ilias)::reinterpret_cast_style>;
  template<typename T> using const_iterator = _namespace(ilias)::cast_iterator<
      typename defn_::const_iterator,
      add_const_t<T>,
      _namespace(ilias)::reinterpret_cast_style>;
  template<typename T> using reverse_iterator =
      _namespace(std)::reverse_iterator<iterator<T>>;
  template<typename T> using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator<T>>;

  using difference_type = typename defn_::iterator::difference_type;
  using size_type = common_type_t<typename data_type::size_type,
                                  make_unsigned_t<difference_type>>;

  deque_storage_base() = default;
  explicit deque_storage_base(const allocator_type&);
  deque_storage_base(const deque_storage_base&) = delete;
  deque_storage_base(deque_storage_base&&);
  ~deque_storage_base() noexcept;
  void swap(deque_storage_base&) noexcept;

  using alloc_base::get_allocator_for_copy_;
  using alloc_base::get_allocator;
  using alloc_base::get_allocator_;

  bool empty() const noexcept;
  size_type size() const noexcept;
  size_type max_size() const;
  size_type capacity() const noexcept;
  void reserve(size_type);
  void shrink_to_fit();

  template<typename T> auto front() noexcept -> add_lvalue_reference_t<T>;
  template<typename T> auto front() const noexcept ->
      add_lvalue_reference_t<add_const_t<T>>;
  template<typename T> auto back() noexcept -> add_lvalue_reference_t<T>;
  template<typename T> auto back() const noexcept ->
      add_lvalue_reference_t<add_const_t<T>>;

  template<typename T, typename... Args> void emplace_front(Args&&...);
  template<typename T, typename... Args> void emplace_back(Args&&...);
  template<typename T, typename... Args> iterator<T> emplace(const_iterator<T>,
                                                             Args&&...);
  template<typename T, typename Iter> auto insert(const_iterator<T>,
                                                  Iter, Iter) ->
      enable_if_t<is_base_of<bidirectional_iterator_tag,
                             typename iterator_traits<Iter>::iterator_category
                            >::value,
                  iterator<T>>;
  template<typename T, typename Iter> auto insert(const_iterator<T>,
                                                  Iter, Iter) ->
      enable_if_t<!is_base_of<bidirectional_iterator_tag,
                              typename iterator_traits<Iter>::iterator_category
                             >::value,
                  iterator<T>>;
  template<typename T> iterator<T> insert_n(const_iterator<T>,
                                            size_type, const T&);

  template<typename T> void pop_front() noexcept;
  template<typename T> void pop_back() noexcept;
  template<typename T> iterator<T> erase(const_iterator<T>) noexcept;
  template<typename T> iterator<T> erase(const_iterator<T>,
                                         const_iterator<T>) noexcept;
  template<typename T> void clear() noexcept;

 private:
  size_type front_avail_() const noexcept;
  size_type back_avail_() const noexcept;
  void ensure_front_avail_(size_type);
  void ensure_back_avail_(size_type);

 public:
  template<typename T> iterator<T> begin() noexcept;
  template<typename T> iterator<T> end() noexcept;
  template<typename T> const_iterator<T> begin() const noexcept;
  template<typename T> const_iterator<T> end() const noexcept;
  template<typename T> const_iterator<T> cbegin() const noexcept;
  template<typename T> const_iterator<T> cend() const noexcept;

 private:
  auto data_ptr_begin() noexcept -> typename defn_::data_ptr_iterator;
  auto data_ptr_end() noexcept -> typename defn_::data_ptr_iterator;
  auto data_ptr_begin() const noexcept ->
      typename defn_::const_data_ptr_iterator;
  auto data_ptr_end() const noexcept ->
      typename defn_::const_data_ptr_iterator;

  void shrink_to_fit_before_() noexcept;
  void shrink_to_fit_after_() noexcept;

  static constexpr size_type block_items_() noexcept { return defn_::n_items; }

  data_type data_;
  size_type off_ = 0;
  size_type size_ = 0;
};


} /* namespace std::impl */


template<typename T, typename Alloc = allocator<T>>
class deque {
 public:
  using value_type = T;
  using allocator_type = Alloc;

 private:
  using data_type =
      impl::deque_storage_base<sizeof(T), alignof(T),
                               typename allocator_traits<allocator_type>::
                                   template rebind_alloc<void>>;

 public:
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = typename allocator_traits<Alloc>::pointer;
  using const_pointer = typename allocator_traits<Alloc>::const_pointer;

  using iterator =
      typename data_type::template iterator<value_type>;
  using const_iterator =
      typename data_type::template const_iterator<value_type>;
  using reverse_iterator = _namespace(std)::reverse_iterator<iterator>;
  using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator>;

  using size_type = typename data_type::size_type;
  using difference_type = typename data_type::difference_type;

  explicit deque(const allocator_type& = allocator_type());
  explicit deque(size_type);
  deque(size_type, const_reference,
        const allocator_type& = allocator_type());
  template<typename InputIter> deque(InputIter, InputIter,
                                     const allocator_type& = allocator_type());
  deque(const deque&);
  deque(deque&&)
      noexcept(is_nothrow_move_constructible<impl::alloc_base<Alloc>>::value);
  deque(const deque&, const allocator_type&);
  deque(deque&&, const allocator_type&);
  deque(initializer_list<value_type>,
        const allocator_type& = allocator_type());
  ~deque() noexcept;

  deque& operator=(const deque&);
  deque& operator=(deque&&);
  deque& operator=(initializer_list<value_type>);
  template<typename InputIter> void assign(InputIter, InputIter);
  void assign(size_type, const_reference);
  void assign(initializer_list<value_type>);
  allocator_type get_allocator() const;

  iterator begin() noexcept;
  const_iterator begin() const noexcept;
  iterator end() noexcept;
  const_iterator end() const noexcept;
  reverse_iterator rbegin() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  reverse_iterator rend() noexcept;
  const_reverse_iterator rend() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  size_type size() const noexcept;
  size_type max_size() const;
  void resize(size_type);
  void resize(size_type, const_reference);
  void shrink_to_fit();
  size_type capacity() const noexcept;  // Extension
  void reserve(size_type);  // Extension
  bool empty() const noexcept;

  reference operator[](size_type) noexcept;
  const_reference operator[](size_type) const noexcept;
  reference at(size_type);
  const_reference at(size_type) const;
  reference front() noexcept;
  const_reference front() const noexcept;
  reference back() noexcept;
  const_reference back() const noexcept;

  template<typename... Args> void emplace_front(Args&&...);
  template<typename... Args> void emplace_back(Args&&...);
  template<typename... Args> iterator emplace(const_iterator, Args&&...);

  void push_front(const value_type&);
  void push_front(value_type&&);
  void push_back(const value_type&);
  void push_back(value_type&&);

  iterator insert(const_iterator, const value_type&);
  iterator insert(const_iterator, value_type&&);
  iterator insert(const_iterator, size_type, const_reference);
  template<typename InputIter> iterator insert(const_iterator,
                                               InputIter, InputIter);
  iterator insert(const_iterator, initializer_list<value_type>);

  void pop_front() noexcept;
  void pop_back() noexcept;

  iterator erase(const_iterator) noexcept;
  iterator erase(const_iterator, const_iterator) noexcept;

  void swap(deque&) noexcept;
  void clear() noexcept;

 private:
  data_type data_;
};

template<typename T, typename Alloc>
bool operator==(const deque<T, Alloc>&, const deque<T, Alloc>&);
template<typename T, typename Alloc>
bool operator!=(const deque<T, Alloc>&, const deque<T, Alloc>&);
template<typename T, typename Alloc>
bool operator<(const deque<T, Alloc>&, const deque<T, Alloc>&);
template<typename T, typename Alloc>
bool operator>(const deque<T, Alloc>&, const deque<T, Alloc>&);
template<typename T, typename Alloc>
bool operator<=(const deque<T, Alloc>&, const deque<T, Alloc>&);
template<typename T, typename Alloc>
bool operator>=(const deque<T, Alloc>&, const deque<T, Alloc>&);

template<typename T, typename Alloc>
void swap(deque<T, Alloc>&, deque<T, Alloc>&);


extern template class deque<bool>;
extern template class deque<char>;
extern template class deque<signed char>;
extern template class deque<unsigned char>;
extern template class deque<short>;
extern template class deque<unsigned short>;
extern template class deque<int>;
extern template class deque<unsigned int>;
extern template class deque<long>;
extern template class deque<unsigned long>;
extern template class deque<long long>;
extern template class deque<unsigned long long>;

extern template bool operator==(const deque<bool>&,
                                const deque<bool>&);
extern template bool operator==(const deque<char>&,
                                const deque<char>&);
extern template bool operator==(const deque<signed char>&,
                                const deque<signed char>&);
extern template bool operator==(const deque<unsigned char>&,
                                const deque<unsigned char>&);
extern template bool operator==(const deque<short>&,
                                const deque<short>&);
extern template bool operator==(const deque<unsigned short>&,
                                const deque<unsigned short>&);
extern template bool operator==(const deque<int>&,
                                const deque<int>&);
extern template bool operator==(const deque<unsigned int>&,
                                const deque<unsigned int>&);
extern template bool operator==(const deque<long>&,
                                const deque<long>&);
extern template bool operator==(const deque<unsigned long>&,
                                const deque<unsigned long>&);
extern template bool operator==(const deque<long long>&,
                                const deque<long long>&);
extern template bool operator==(const deque<unsigned long long>&,
                                const deque<unsigned long long>&);

extern template bool operator<(const deque<bool>&,
                               const deque<bool>&);
extern template bool operator<(const deque<char>&,
                               const deque<char>&);
extern template bool operator<(const deque<signed char>&,
                               const deque<signed char>&);
extern template bool operator<(const deque<unsigned char>&,
                               const deque<unsigned char>&);
extern template bool operator<(const deque<short>&,
                               const deque<short>&);
extern template bool operator<(const deque<unsigned short>&,
                               const deque<unsigned short>&);
extern template bool operator<(const deque<int>&,
                               const deque<int>&);
extern template bool operator<(const deque<unsigned int>&,
                               const deque<unsigned int>&);
extern template bool operator<(const deque<long>&,
                               const deque<long>&);
extern template bool operator<(const deque<unsigned long>&,
                               const deque<unsigned long>&);
extern template bool operator<(const deque<long long>&,
                               const deque<long long>&);
extern template bool operator<(const deque<unsigned long long>&,
                               const deque<unsigned long long>&);

extern template class deque<array<short, 768>>;
extern template bool operator==(const deque<array<short, 768>>&,
                                const deque<array<short, 768>>&);
extern template bool operator<(const deque<array<short, 768>>&,
                               const deque<array<short, 768>>&);


_namespace_end(std)

#include <deque-inl.h>

#endif /* _DEQUE_ */

#ifndef _ALGORITHM_
#define _ALGORITHM_

#include <cdecl.h>
#include <cstring>
#include <functional>
#include <initializer_list>
#include <iterator>
#include <new>
#include <tuple>
#include <utility>
#include <stdimpl/simple_bitset.h>

_namespace_begin(std)


template<typename InputIterator, class Predicate>
bool all_of(InputIterator, InputIterator, Predicate);

template<typename InputIterator, class Predicate>
bool any_of(InputIterator, InputIterator, Predicate);

template<typename InputIterator, class Predicate>
bool none_of(InputIterator, InputIterator, Predicate);


template<typename InputIterator, class Function>
Function for_each(InputIterator, InputIterator, Function);

template<typename InputIterator, typename T>
InputIterator find(InputIterator, InputIterator, const T&);

template<typename InputIterator, typename Predicate>
InputIterator find_if(InputIterator, InputIterator, Predicate);

template<typename InputIterator, typename Predicate>
InputIterator find_if_not(InputIterator, InputIterator, Predicate);

template<typename ForwardIterator1, typename ForwardIterator2>
ForwardIterator1 find_end(ForwardIterator1, ForwardIterator1,
                          ForwardIterator2, ForwardIterator2);

template<typename ForwardIterator1, typename ForwardIterator2,
         typename BinaryPredicate>
ForwardIterator1 find_end(ForwardIterator1, ForwardIterator1,
                          ForwardIterator2, ForwardIterator2,
                          BinaryPredicate);

template<typename InputIterator, typename ForwardIterator>
InputIterator find_first_of(InputIterator, InputIterator,
                            ForwardIterator, ForwardIterator);

template<typename InputIterator, typename ForwardIterator,
         typename BinaryPredicate>
InputIterator find_first_of(InputIterator, InputIterator,
                            ForwardIterator, ForwardIterator,
                            BinaryPredicate);

template<typename ForwardIterator>
ForwardIterator adjecent_find(ForwardIterator, ForwardIterator);

template<typename ForwardIterator, typename BinaryPredicate>
ForwardIterator adjecent_find(ForwardIterator, ForwardIterator,
                              BinaryPredicate);

template<typename InputIterator, typename T>
typename iterator_traits<InputIterator>::difference_type count(
    InputIterator, InputIterator, const T&);

template<typename InputIterator, typename Predicate>
typename iterator_traits<InputIterator>::difference_type count_if(
    InputIterator, InputIterator, Predicate);

template<typename InputIterator1, typename InputIterator2>
pair<InputIterator1, InputIterator2> mismatch(InputIterator1, InputIterator1,
                                              InputIterator2);

template<typename InputIterator1, typename InputIterator2,
         typename BinaryPredicate>
pair<InputIterator1, InputIterator2> mismatch(InputIterator1, InputIterator1,
                                              InputIterator2,
                                              BinaryPredicate);

template<typename InputIterator1, typename InputIterator2>
pair<InputIterator1, InputIterator2> mismatch(InputIterator1, InputIterator1,
                                              InputIterator2, InputIterator2);

template<typename InputIterator1, typename InputIterator2,
         typename BinaryPredicate>
pair<InputIterator1, InputIterator2> mismatch(InputIterator1, InputIterator1,
                                              InputIterator2, InputIterator2,
                                              BinaryPredicate);

template<typename InputIterator1, typename InputIterator2>
bool equal(InputIterator1, InputIterator1, InputIterator2);

template<typename InputIterator1, typename InputIterator2,
         typename BinaryPredicate>
bool equal(InputIterator1, InputIterator1, InputIterator2, BinaryPredicate);

template<typename InputIterator1, typename InputIterator2>
bool equal(InputIterator1, InputIterator1, InputIterator2, InputIterator2);

template<typename InputIterator1, typename InputIterator2,
         typename BinaryPredicate>
bool equal(InputIterator1, InputIterator1, InputIterator2, InputIterator2,
           BinaryPredicate);

template<typename ForwardIterator1, typename ForwardIterator2>
bool is_permutation(ForwardIterator1, ForwardIterator1, ForwardIterator2);

template<typename ForwardIterator1, typename ForwardIterator2,
         typename BinaryPredicate>
bool is_permutation(ForwardIterator1, ForwardIterator1, ForwardIterator2,
                    BinaryPredicate);

template<typename ForwardIterator1, typename ForwardIterator2>
bool is_permutation(ForwardIterator1, ForwardIterator1,
                    ForwardIterator2, ForwardIterator2);

template<typename ForwardIterator1, typename ForwardIterator2,
         typename BinaryPredicate>
bool is_permutation(ForwardIterator1, ForwardIterator1,
                    ForwardIterator2, ForwardIterator2,
                    BinaryPredicate);

template<typename ForwardIterator1, typename ForwardIterator2>
ForwardIterator1 search(ForwardIterator1, ForwardIterator1,
                        ForwardIterator2, ForwardIterator2);

template<typename ForwardIterator1, typename ForwardIterator2,
         typename BinaryPredicate>
ForwardIterator1 search(ForwardIterator1, ForwardIterator1,
                        ForwardIterator2, ForwardIterator2,
                        BinaryPredicate);

template<typename ForwardIterator, class Size, typename T>
ForwardIterator search_n(ForwardIterator, ForwardIterator, Size, const T&);

template<typename ForwardIterator, class Size, typename T,
         typename BinaryPredicate>
ForwardIterator search_n(ForwardIterator, ForwardIterator, Size, const T&,
                         BinaryPredicate);


template<typename InputIterator, typename OutputIterator>
OutputIterator copy(InputIterator, InputIterator, OutputIterator);

template<typename InputIterator, typename Size, typename OutputIterator>
OutputIterator copy_n(InputIterator, Size, OutputIterator);

template<typename InputIterator, typename OutputIterator, typename Predicate>
OutputIterator copy_if(InputIterator, InputIterator, OutputIterator,
                       Predicate);

template<typename BidirectionalIterator1, typename BidirectionalIterator2>
BidirectionalIterator2 copy_backward(BidirectionalIterator1,
                                     BidirectionalIterator1,
                                     BidirectionalIterator2);

template<typename InputIterator, typename OutputIterator>
OutputIterator move(InputIterator, InputIterator, OutputIterator);

template<typename BidirectionalIterator1, typename BidirectionalIterator2>
BidirectionalIterator2 move_backward(BidirectionalIterator1,
                                     BidirectionalIterator1,
                                     BidirectionalIterator2);

template<typename ForwardIterator1, typename ForwardIterator2>
ForwardIterator2 swap_ranges(ForwardIterator1, ForwardIterator1,
                             ForwardIterator2);

template<typename ForwardIterator1, typename ForwardIterator2>
void iter_swap(ForwardIterator1, ForwardIterator2);

template<typename InputIterator, typename OutputIterator,
         typename UnaryOperation>
OutputIterator transform(InputIterator, InputIterator,
                         OutputIterator, UnaryOperation);

template<typename InputIterator1, typename InputIterator2,
         typename OutputIterator, typename BinaryOperation>
OutputIterator transform(InputIterator1, InputIterator1,
                         InputIterator2,
                         OutputIterator, BinaryOperation);

template<typename ForwardIterator, typename T>
void replace(ForwardIterator, ForwardIterator, const T&, const T&);

template<typename ForwardIterator, typename Predicate, typename T>
void replace_if(ForwardIterator, ForwardIterator, Predicate, const T&);

template<typename ForwardIterator, typename OutputIterator, typename T>
void replace_copy(ForwardIterator, ForwardIterator, OutputIterator,
                  const T&, const T&);

template<typename ForwardIterator, typename OutputIterator,
         typename Predicate, typename T>
void replace_copy_if(ForwardIterator, ForwardIterator, OutputIterator,
                     Predicate, const T&);

template<typename ForwardIterator, typename T>
void fill(ForwardIterator, ForwardIterator, const T&);

template<typename ForwardIterator, typename Size, typename T>
ForwardIterator fill_n(ForwardIterator, Size, const T&);

template<typename OutputIterator, typename Generator>
void generate(OutputIterator, OutputIterator, Generator);

template<typename OutputIterator, typename Size, typename Generator>
OutputIterator generate_n(OutputIterator, Size, Generator);

template<typename ForwardIterator, typename T>
ForwardIterator remove(ForwardIterator, ForwardIterator, const T&);

template<typename ForwardIterator, typename Predicate>
ForwardIterator remove_if(ForwardIterator, ForwardIterator, Predicate);

template<typename InputIterator, typename OutputIterator, typename T>
OutputIterator remove_copy(InputIterator, InputIterator, OutputIterator,
                           const T&);

template<typename InputIterator, typename OutputIterator, typename Predicate>
OutputIterator remove_copy_if(InputIterator, InputIterator, OutputIterator,
                              Predicate);

template<typename ForwardIterator>
ForwardIterator unique(ForwardIterator, ForwardIterator);

template<typename ForwardIterator, typename BinaryPredicate>
ForwardIterator unique(ForwardIterator, ForwardIterator, BinaryPredicate);

template<typename InputIterator, typename OutputIterator>
OutputIterator unique_copy(InputIterator, InputIterator, OutputIterator);

template<typename InputIterator, typename OutputIterator,
         typename BinaryPredicate>
OutputIterator unique_copy(InputIterator, InputIterator, OutputIterator,
                           BinaryPredicate);

template<typename BidirectionalIterator>
void reverse(BidirectionalIterator, BidirectionalIterator);

template<typename BidirectionalIterator, typename OutputIterator>
OutputIterator reverse(BidirectionalIterator, BidirectionalIterator,
                       OutputIterator);

template<typename ForwardIterator>
ForwardIterator rotate(ForwardIterator first, ForwardIterator middle,
                       ForwardIterator last);

template<typename ForwardIterator, typename OutputIterator>
OutputIterator rotate_copy(ForwardIterator, ForwardIterator, ForwardIterator,
                           OutputIterator);

#if 0 // XXX implement once randomization is implemented
template<typename RandomAccessIterator>
void random_shuffle(RandomAccessIterator, RandomAccessIterator);

template<typename RandomAccessIterator, typename RandomNumberGenerator>
void random_shuffle(RandomAccessIterator, RandomAccessIterator, RandomNumberGenerator&&);

template<typename RandomAccessIterator, typename UniformRandomNumberGenerator>
void random_shuffle(RandomAccessIterator, RandomAccessIterator, UniformRandomNumberGenerator&&);
#endif

template<typename InputIterator, typename Predicate>
bool is_partitioned(InputIterator, InputIterator, Predicate);

template<typename ForwardIterator, typename Predicate>
ForwardIterator partition(ForwardIterator, ForwardIterator, Predicate);

template<typename BidirectionalIterator, typename Predicate>
BidirectionalIterator stable_partition(BidirectionalIterator,
                                       BidirectionalIterator,
                                       Predicate);

template<typename InputIterator, typename OutputIterator1,
         typename OutputIterator2, typename Predicate>
pair<OutputIterator1, OutputIterator2> partition_copy(InputIterator,
                                                      InputIterator,
                                                      OutputIterator1,
                                                      OutputIterator2,
                                                      Predicate);

template<typename ForwardIterator, typename Predicate>
ForwardIterator partition_point(ForwardIterator, ForwardIterator, Predicate);


template<typename RandomAccessIterator>
void sort(RandomAccessIterator, RandomAccessIterator);

template<typename RandomAccessIterator, typename Predicate>
void sort(RandomAccessIterator, RandomAccessIterator, Predicate);

template<typename RandomAccessIterator>
void stable_sort(RandomAccessIterator, RandomAccessIterator);

template<typename RandomAccessIterator, typename Predicate>
void stable_sort(RandomAccessIterator, RandomAccessIterator,
                 Predicate);


template<typename T>
auto min(const T& a, const T& b) -> const T&;

template<typename T>
auto max(const T& a, const T& b) -> const T&;

template<typename T, typename Comp>
auto min(const T& a, const T& b, Comp cmp) -> const T&;

template<typename T, typename Comp>
auto max(const T& a, const T& b, Comp cmp) -> const T&;

template<typename T>
auto min(initializer_list<T> il) -> T;

template<typename T>
auto max(initializer_list<T> il) -> T;

template<typename T, typename Comp>
auto min(initializer_list<T> il, Comp cmp) -> T;

template<typename T, typename Comp>
auto max(initializer_list<T> il, Comp cmp) -> T;


#define _EXTERNALIZE(extern, Type)					\
extern template Type* find(Type*, Type*, const Type&);			\
extern template const Type* find(const Type*, const Type*,		\
                                 const Type&);				\
extern template Type* adjecent_find(Type*, Type*);			\
extern template const Type* adjecent_find(const Type*, const Type*);	\
extern template iterator_traits<Type*>::difference_type count(		\
    Type*, Type*, const Type&);						\
extern template iterator_traits<const Type*>::difference_type count(	\
    const Type*, const Type*, const Type&);				\
extern template void replace(Type*, Type*, const Type&, const Type&);	\
extern template void fill(Type*, Type*, const Type&);			\
extern template Type* remove(Type*, Type*, const Type&);		\
extern template Type* unique(Type*, Type*);				\
extern template void reverse(Type*, Type*);				\
extern template Type* rotate(Type*, Type*, Type*);			\
extern template void sort(Type*, Type*);				\
extern template void stable_sort(Type*, Type*);


#define _EXTERNALIZE_ALL(extern)					\
_EXTERNALIZE(extern, char)						\
_EXTERNALIZE(extern, wchar_t)						\
_EXTERNALIZE(extern, signed char)					\
_EXTERNALIZE(extern, unsigned char)					\
_EXTERNALIZE(extern, short)						\
_EXTERNALIZE(extern, unsigned short)					\
_EXTERNALIZE(extern, int)						\
_EXTERNALIZE(extern, unsigned int)					\
_EXTERNALIZE(extern, long)						\
_EXTERNALIZE(extern, unsigned long)					\
_EXTERNALIZE(extern, long long)						\
_EXTERNALIZE(extern, unsigned long long)

_EXTERNALIZE_ALL(extern)

#ifndef _COMPILING_ALGORITHM
# undef _EXTERNALIZE
# undef _EXTERNALIZE_ALL
#endif


_namespace_end(std)

#include <algorithm-inl.h>

#endif /* _ALGORITHM_ */

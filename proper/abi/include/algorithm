#ifndef _ALGORITHM_
#define _ALGORITHM_

#include <cdecl.h>
#include <initializer_list>

_namespace_begin(std)


template<typename T> auto min(const T& a, const T& b) -> const T&;
template<typename T> auto max(const T& a, const T& b) -> const T&;
template<typename T, typename Comp> auto min(const T& a, const T& b,
                                             Comp cmp) -> const T&;
template<typename T, typename Comp> auto max(const T& a, const T& b,
                                             Comp cmp) -> const T&;
template<typename T> auto min(initializer_list<T> il) -> T;
template<typename T> auto max(initializer_list<T> il) -> T;
template<typename T, typename Comp> auto min(initializer_list<T> il,
                                             Comp cmp) -> T;
template<typename T, typename Comp> auto max(initializer_list<T> il,
                                             Comp cmp) -> T;


_namespace_end(std)

#include <algorithm-inl.h>

#endif /* _ALGORITHM_ */

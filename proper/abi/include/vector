#ifndef _VECTOR_
#define _VECTOR_

#include <cdecl.h>
#include <initializer_list>
#include <iterator>
#include <memory>
#include <utility>
#include <stdexcept>
#include <algorithm>
#include <stdimpl/alloc_base.h>

_namespace_begin(std)


template<typename T, typename Alloc = allocator<T>>
class vector
: public impl::alloc_base<Alloc>
{
 public:
  using value_type = T;
  using allocator_type = typename impl::alloc_base<Alloc>::allocator_type;
  using difference_type =
      typename allocator_traits<allocator_type>::difference_type;
  using pointer = typename allocator_traits<allocator_type>::pointer;
  using const_pointer =
      typename allocator_traits<allocator_type>::const_pointer;
  using size_type = typename allocator_traits<allocator_type>::size_type;
  using reference = value_type&;
  using const_reference = const value_type&;
  using iterator = value_type*;
  using const_iterator = const value_type*;
  using reverse_iterator = _namespace(std)::reverse_iterator<iterator>;
  using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator>;

  explicit vector(const allocator_type& = allocator_type());
  explicit vector(size_type, const allocator_type& = allocator_type());
  vector(size_type, const_reference, const allocator_type& = allocator_type());
  template<typename InputIter> vector(
      InputIter, InputIter, const allocator_type& = allocator_type());
  vector(const vector&);
  vector(vector&& o)
      noexcept(is_nothrow_move_constructible<impl::alloc_base<Alloc>>::value);
  vector(const vector&, const allocator_type&);
  vector(vector&&, const allocator_type&);
  vector(initializer_list<value_type>,
         const allocator_type& = allocator_type());
  ~vector();
  vector& operator=(const vector&);
  vector& operator=(vector&&);
  vector& operator=(initializer_list<value_type>);

  iterator begin() noexcept;
  iterator end() noexcept;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  reverse_iterator rbegin() noexcept;
  reverse_iterator rend() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  const_reverse_iterator rend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  size_type size() const noexcept;
  size_type max_size() const noexcept;
  void resize(size_type);
  void resize(size_type, const_reference);
  size_type capacity() const noexcept;
  bool empty() const noexcept;
  void reserve(size_type);
  void shrink_to_fit();

  reference operator[](size_type) noexcept;
  const_reference operator[](size_type) const noexcept;
  reference at(size_type);
  const_reference at(size_type) const;
  reference front() noexcept;
  const_reference front() const noexcept;
  reference back() noexcept;
  const_reference back() const noexcept;
  value_type* data() noexcept;
  const value_type* data() const noexcept;

  template<typename... Args> void emplace_back(Args&&... args);
  void push_back(const_reference);
  void push_back(value_type&&);
  void pop_back();

  template<typename... Args> iterator emplace(const_iterator, Args&&... args);
  iterator insert(const_iterator, const_reference);
  iterator insert(const_iterator, value_type&&);
  iterator insert(const_iterator, size_type, const_reference);
  template<typename InputIter> iterator insert(const_iterator,
                                               InputIter, InputIter);
  iterator insert(const_iterator, initializer_list<value_type>);
  iterator erase(const_iterator);
  iterator erase(const_iterator, const_iterator);
  void swap(vector& o)
      noexcept(noexcept(declval<vector>().swap_(o)));
  void clear() noexcept;

 private:
  using move_iterator = move_iterator<iterator>;
  using move_if_noexcept_iterator =
      conditional_t<(is_nothrow_move_constructible<value_type>::value ||
                     !is_copy_constructible<value_type>::value),
                    move_iterator,
                    const_iterator>;

  pointer heap_ = nullptr;
  size_type avail_ = 0;
  size_type size_ = 0;
};


template<typename T, typename Alloc>
bool operator==(const vector<T, Alloc>&, const vector<T, Alloc>&)
    noexcept(noexcept(declval<const typename vector<T, Alloc>::value_type>() ==
                      declval<const typename vector<T, Alloc>::value_type>()));

template<typename T, typename Alloc>
bool operator<(const vector<T, Alloc>&, const vector<T, Alloc>&)
    noexcept(noexcept(declval<const typename vector<T, Alloc>::value_type>() <
                      declval<const typename vector<T, Alloc>::value_type>()));

template<typename T, typename Alloc>
bool operator!=(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(!(a == b)));

template<typename T, typename Alloc>
bool operator>(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(b < a));

template<typename T, typename Alloc>
bool operator>=(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(!(a < b)));

template<typename T, typename Alloc>
bool operator<=(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(!(b < a)));

template<typename T, typename Alloc>
void swap(vector<T, Alloc>& a, vector<T, Alloc>& b)
    noexcept(noexcept(a.swap(b)));


namespace impl {


class _vector_bool_reference;

namespace {

template<typename T>
struct _vector_bool_iterator_deref {
  const T result;

  _vector_bool_iterator_deref(uintptr_t* p, uintptr_t msk) noexcept
  : result(p, msk) {}
};

template<>
struct _vector_bool_iterator_deref<bool> {
  const bool result;

  _vector_bool_iterator_deref(const uintptr_t* p, uintptr_t msk) noexcept
  : result(*p & msk) {}
};

} /* namespace std::impl::<unnamed> */

template<bool> class _vector_bool_iterator;

template<typename InputIter>
_vector_bool_iterator<false> bitwise_copy(InputIter, InputIter,
                                          _vector_bool_iterator<false>);
template<typename InputIter>
_vector_bool_iterator<false> bitwise_move(InputIter, InputIter,
                                          _vector_bool_iterator<false>);

/*
 * Provide a way to befriend algorithms, without requiring instantiation of
 * _vector_bool_iterator types prior to their definition.
 */
struct _vector_bool_iterator_algorithms;

template<bool IsConst>
class _vector_bool_iterator
: public iterator<random_access_iterator_tag,
                  conditional_t<IsConst, const bool, bool>,
                  ptrdiff_t,
                  conditional_t<IsConst, const bool*, bool*>,
                  conditional_t<IsConst, bool, _vector_bool_reference>>
{
  friend _vector_bool_iterator<!IsConst>;

  template<typename InputIter>
  friend _vector_bool_iterator<false> bitwise_copy(
      InputIter, InputIter, _vector_bool_iterator<false>);
  template<typename InputIter>
  friend _vector_bool_iterator<false> bitwise_move(
      InputIter, InputIter, _vector_bool_iterator<false>);
  friend _vector_bool_iterator_algorithms;

 private:
  using iterator_base =
      _namespace(std)::iterator<random_access_iterator_tag,
                                conditional_t<IsConst, const bool, bool>,
                                ptrdiff_t,
                                conditional_t<IsConst, const bool*, bool*>,
                                conditional_t<IsConst,
                                              bool,
                                              _vector_bool_reference>>;
  using elem = uintptr_t;
  using elem_pointer = conditional_t<IsConst, const elem*, elem*>;

 public:
  using reference = typename iterator_base::reference;
  using pointer = typename iterator_base::pointer;
  using difference_type = typename iterator_base::difference_type;

  constexpr _vector_bool_iterator() = default;
  constexpr _vector_bool_iterator(const _vector_bool_iterator&) = default;
  _vector_bool_iterator& operator=(const _vector_bool_iterator&) = default;
  explicit constexpr _vector_bool_iterator(elem_pointer) noexcept;

  /* _vector_bool_iterator<true>(const _vector_bool_iterator<false>&); */
  template<typename Rhs>
  _vector_bool_iterator(
      const Rhs&,
      enable_if_t<(is_base_of<_vector_bool_iterator<false>, Rhs>::value &&
                   IsConst),
                  int> = 0)
      noexcept;

 private:
  constexpr _vector_bool_iterator(elem_pointer, unsigned char) noexcept;

 public:
  /* Omit operator->, since bool does not have methods. */
  conditional_t<IsConst, const bool*, bool*> operator->() const noexcept =
      delete;
  reference operator*() const noexcept;

  _vector_bool_iterator& operator++() noexcept;
  _vector_bool_iterator operator++(int) noexcept;
  _vector_bool_iterator& operator--() noexcept;
  _vector_bool_iterator operator--(int) noexcept;

  _vector_bool_iterator& operator+=(difference_type) noexcept;
  _vector_bool_iterator& operator-=(difference_type) noexcept;
  constexpr _vector_bool_iterator operator+(difference_type) const noexcept;
  constexpr _vector_bool_iterator operator-(difference_type) const noexcept;
  constexpr difference_type operator-(const _vector_bool_iterator&)
      const noexcept;

  reference operator[](difference_type) const noexcept;

  friend bool operator==(const _vector_bool_iterator<true>&,
                         const _vector_bool_iterator<true>&) noexcept;
  friend bool operator<(const _vector_bool_iterator<true>&,
                        const _vector_bool_iterator<true>&) noexcept;

 private:
  elem_pointer p_ = nullptr;
  unsigned char shift_ = 0;
};

struct _vector_bool_iterator_algorithms {
  static _vector_bool_iterator<true>::difference_type bitwise_count(
      _vector_bool_iterator<true>, _vector_bool_iterator<true>, bool) noexcept;
};

template<bool IsConst>
bool operator!=(const _vector_bool_iterator<true>&,
                const _vector_bool_iterator<true>&) noexcept;
template<bool IsConst>
bool operator>(const _vector_bool_iterator<true>&,
               const _vector_bool_iterator<true>&) noexcept;
template<bool IsConst>
bool operator<=(const _vector_bool_iterator<true>&,
                const _vector_bool_iterator<true>&) noexcept;
template<bool IsConst>
bool operator>=(const _vector_bool_iterator<true>&,
                const _vector_bool_iterator<true>&) noexcept;


class _vector_bool_reference {
  template<typename, typename> friend class vector;
  template<bool> friend class _vector_bool_iterator;
  template<typename> friend struct _vector_bool_iterator_deref;

 private:
  using elem = uintptr_t;

  constexpr _vector_bool_reference(elem*, elem) noexcept;

 public:
  _vector_bool_reference() = delete;
  _vector_bool_reference(const _vector_bool_reference&) noexcept = default;

  operator bool() const noexcept;
  const _vector_bool_reference& operator=(const bool&) const noexcept;
  const _vector_bool_reference& operator=(const _vector_bool_reference&)
      const noexcept;
  void flip() const noexcept;

  friend bool exchange(const _vector_bool_reference&, const bool&) noexcept;
  friend void swap(const _vector_bool_reference&,
                   const _vector_bool_reference&) noexcept;
  friend void swap(const _vector_bool_reference&, bool&) noexcept;
  friend void swap(bool&, const _vector_bool_reference&) noexcept;

 private:
  elem*const p_;
  const elem msk_;
};


} /* namespace std::impl */


/*
 * Specialize common algorithms for vector<bool>.
 */
template<typename InputIter>
impl::_vector_bool_iterator<false> copy(InputIter, InputIter,
                                        impl::_vector_bool_iterator<false>);
template<typename InputIter>
impl::_vector_bool_iterator<false> move(InputIter, InputIter,
                                        impl::_vector_bool_iterator<false>);
template<bool IsConst>
impl::_vector_bool_iterator<true>::difference_type count(
    impl::_vector_bool_iterator<IsConst>, impl::_vector_bool_iterator<IsConst>,
    const bool&) noexcept;

/*
 * Specializations to reduce amount of generated code.
 */
impl::_vector_bool_iterator<false> copy(impl::_vector_bool_iterator<false>,
                                        impl::_vector_bool_iterator<false>,
                                        impl::_vector_bool_iterator<false>)
    noexcept;
impl::_vector_bool_iterator<false> move(impl::_vector_bool_iterator<false>,
                                        impl::_vector_bool_iterator<false>,
                                        impl::_vector_bool_iterator<false>)
    noexcept;
impl::_vector_bool_iterator<false> move(impl::_vector_bool_iterator<true>,
                                        impl::_vector_bool_iterator<true>,
                                        impl::_vector_bool_iterator<false>)
    noexcept;


template<typename Allocator>
class vector<bool, Allocator>
: private impl::alloc_base<
      typename allocator_traits<Allocator>::template rebind_alloc<uintptr_t>>
{
  template<typename A> friend bool operator==(const vector<bool, A>&,
                                              const vector<bool, A>&) noexcept;
  template<typename A> friend bool operator<(const vector<bool, A>&,
                                             const vector<bool, A>&) noexcept;

 private:
  using elem = uintptr_t;
  using alloc_base = impl::alloc_base<typename allocator_traits<Allocator>::
                         template rebind_alloc<elem>>;

 public:
  using value_type = bool;
  using allocator_type = Allocator;
  using size_type = typename allocator_traits<allocator_type>::size_type;
  using reference = impl::_vector_bool_reference;
  using const_reference = bool;
  using iterator = impl::_vector_bool_iterator<false>;
  using const_iterator = impl::_vector_bool_iterator<true>;
  using reverse_iterator = _namespace(std)::reverse_iterator<iterator>;
  using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator>;
  using difference_type = typename iterator_traits<iterator>::difference_type;
  using pointer = iterator;  // XXX: maybe wrap to remove methods?
  using const_pointer = const_iterator;  // XXX: maybe wrap to remove methods?

  explicit vector(const allocator_type& = allocator_type());
  explicit vector(size_type, const bool& = bool(),
                  const allocator_type& = allocator_type());
  template<typename InputIter>
  vector(InputIter, InputIter,
         const allocator_type& = allocator_type());
  vector(const vector&);
  vector(vector&&);
  vector(const vector&, const allocator_type&);
  vector(vector&&, const allocator_type&);
  vector(initializer_list<value_type>,
         const allocator_type& = allocator_type());
  ~vector() noexcept;
  vector& operator=(const vector&);
  vector& operator=(vector&&);
  vector& operator=(initializer_list<value_type>);

  template<typename InputIter> void assign(InputIter, InputIter);
  void assign(size_type, const value_type&);
  void assign(initializer_list<value_type>);

  allocator_type get_allocator() const;

  iterator begin() noexcept;
  iterator end() noexcept;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  reverse_iterator rbegin() noexcept;
  reverse_iterator rend() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  const_reverse_iterator rend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  size_type size() const noexcept;
  size_type max_size() const noexcept;
  void resize(size_type, value_type = false);
  size_type capacity() const noexcept;
  bool empty() const noexcept;
  void reserve(size_type);
  void shrink_to_fit();

  reference operator[](size_type) noexcept;
  const_reference operator[](size_type) const noexcept;
  reference at(size_type);
  const_reference at(size_type) const;
  reference front() noexcept;
  const_reference front() const noexcept;
  reference back() noexcept;
  const_reference back() const noexcept;

  void push_back(const value_type&);
  void pop_back() noexcept;

  iterator insert(const_iterator, const value_type&);
  iterator insert(const_iterator, size_type, const value_type&);
  template<typename InputIter> iterator insert(const_iterator,
                                               InputIter, InputIter);
  iterator insert(const_iterator, initializer_list<value_type>);
  iterator erase(const_iterator);
  iterator erase(const_iterator, const_iterator);
  void swap(vector& o)
      noexcept(noexcept(declval<vector>().swap_(o)));
  void clear() noexcept;

 private:
  size_type heap_size_() const noexcept;
  size_type heap_avail_() const noexcept;

  elem* heap_ = nullptr;
  size_type avail_ = 0;
  size_type size_ = 0;
};

/*
 * Specialize comparison for vector<bool, ...>.
 */
template<typename Alloc>
bool operator==(const vector<bool, Alloc>&, const vector<bool, Alloc>&)
    noexcept;
template<typename Alloc>
bool operator<(const vector<bool, Alloc>&, const vector<bool, Alloc>&)
    noexcept;


extern template class vector<bool>;

extern template bool operator==(const vector<bool>&,
                                const vector<bool>&);

extern template bool operator<(const vector<bool>&,
                               const vector<bool>&);


_namespace_end(std)

#include <vector-inl.h>
#include <vector-bool-inl.h>

#endif /* _VECTOR_ */

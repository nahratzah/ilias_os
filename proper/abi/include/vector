#ifndef _VECTOR_
#define _VECTOR_

#include <cdecl.h>
#include <initializer_list>
#include <iterator>
#include <memory>
#include <utility>
#include <stdexcept>
#include <algorithm>
#include <stdimpl/alloc_base.h>

_namespace_begin(std)


namespace impl {


template<typename T, bool Memcpy =
             is_trivially_copyable<typename T::value_type>::value>
    struct vector_copy_impl_basics;


} /* namespace std::impl */


template<typename T, typename Alloc = allocator<T>>
class vector : public impl::alloc_base<Alloc> {
  friend struct impl::vector_copy_impl_basics<vector, true>;
  friend struct impl::vector_copy_impl_basics<vector, false>;

 public:
  using value_type = T;
  using allocator_type = typename impl::alloc_base<Alloc>::allocator_type;
  using difference_type =
      typename allocator_traits<allocator_type>::difference_type;
  using pointer = typename allocator_traits<allocator_type>::pointer;
  using const_pointer =
      typename allocator_traits<allocator_type>::const_pointer;
  using size_type = typename allocator_traits<allocator_type>::size_type;
  using reference = value_type&;
  using const_reference = const value_type&;
  using iterator = value_type*;
  using const_iterator = const value_type*;
  using reverse_iterator = _namespace(std)::reverse_iterator<iterator>;
  using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator>;

  explicit vector(const allocator_type& = allocator_type());
  explicit vector(size_type, const allocator_type& = allocator_type());
  vector(size_type, const_reference, const allocator_type& = allocator_type());
  template<typename InputIter> vector(
      InputIter, InputIter, const allocator_type& = allocator_type());
  vector(const vector&);
  vector(vector&& o)
      noexcept(is_nothrow_move_constructible<impl::alloc_base<Alloc>>::value);
  vector(const vector&, const allocator_type&);
  vector(vector&&, const allocator_type&);
  vector(initializer_list<value_type>,
         const allocator_type& = allocator_type());
  ~vector();
  vector& operator=(const vector&);
  vector& operator=(vector&&);
  vector& operator=(initializer_list<value_type>);

  iterator begin() noexcept;
  iterator end() noexcept;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  reverse_iterator rbegin() noexcept;
  reverse_iterator rend() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  const_reverse_iterator rend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  size_type size() const noexcept;
  size_type max_size() const noexcept;
  void resize(size_type);
  void resize(size_type, const_reference);
  size_type capacity() const noexcept;
  bool empty() const noexcept;
  void reserve(size_type);
  void shrink_to_fit();

  reference operator[](size_type) noexcept;
  const_reference operator[](size_type) const noexcept;
  reference at(size_type);
  const_reference at(size_type) const;
  reference front() noexcept;
  const_reference front() const noexcept;
  reference back() noexcept;
  const_reference back() const noexcept;
  value_type* data() noexcept;
  const value_type* data() const noexcept;

  template<typename... Args> void emplace_back(Args&&... args);
  void push_back(const_reference);
  void push_back(value_type&&);
  void pop_back();

  template<typename... Args> iterator emplace(const_iterator, Args&&... args);
  iterator insert(const_iterator, const_reference);
  iterator insert(const_iterator, value_type&&);
  iterator insert(const_iterator, size_type, const_reference);
  template<typename InputIter> iterator insert(const_iterator,
                                               InputIter, InputIter);
  iterator insert(const_iterator, initializer_list<value_type>);
  iterator erase(const_iterator);
  iterator erase(const_iterator, const_iterator);
  void swap(vector& o)
      noexcept(noexcept(declval<vector>().swap_(o)));
  void clear() noexcept;

 private:
  using copy_impl_basics = impl::vector_copy_impl_basics<vector>;
  struct copy_impl;

  pointer heap_;
  size_type avail_;
  size_type size_;
};


template<typename T, typename Alloc>
bool operator==(const vector<T, Alloc>&, const vector<T, Alloc>&)
    noexcept(noexcept(declval<const typename vector<T, Alloc>::value_type>() ==
                      declval<const typename vector<T, Alloc>::value_type>()));

template<typename T, typename Alloc>
bool operator<(const vector<T, Alloc>&, const vector<T, Alloc>&)
    noexcept(noexcept(declval<const typename vector<T, Alloc>::value_type>() <
                      declval<const typename vector<T, Alloc>::value_type>()));

template<typename T, typename Alloc>
bool operator!=(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(!(a == b)));

template<typename T, typename Alloc>
bool operator>(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(b < a));

template<typename T, typename Alloc>
bool operator>=(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(!(a < b)));

template<typename T, typename Alloc>
bool operator<=(const vector<T, Alloc>& a, const vector<T, Alloc>& b)
    noexcept(noexcept(!(b < a)));

template<typename T, typename Alloc>
void swap(vector<T, Alloc>& a, vector<T, Alloc>& b)
    noexcept(noexcept(a.swap(b)));


extern template class vector<char>;
extern template class vector<wchar_t>;
extern template class vector<unsigned char>;
extern template class vector<signed char>;
extern template class vector<unsigned short>;
extern template class vector<short>;
extern template class vector<unsigned int>;
extern template class vector<int>;
extern template class vector<unsigned long>;
extern template class vector<long>;
extern template class vector<unsigned long long>;
extern template class vector<long long>;


_namespace_end(std)

#include <vector-inl.h>

#endif /* _VECTOR_ */

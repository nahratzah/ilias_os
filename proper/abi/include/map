#ifndef _MAP_
#define _MAP_

#include <cdecl.h>
#include <initializer_list>
#include <utility>
#include <stdimpl/set_support.h>
#include <stdimpl/alloc_base.h>

_namespace_begin(std)
namespace impl {

template<typename Cmp, typename Key, typename T, typename Wrapped>
struct map_cmp_wrapper {
 private:
  Cmp cmp_;

  template<typename X>
  static const X& unwrap_(const X& x) noexcept { return x; }
  static const Key& unwrap_(const pair<const Key, T>& x) noexcept {
    return x.first;
  }
  static const Key& unwrap_(const Wrapped& x) noexcept {
    return x.value.first;
  }

 public:
  map_cmp_wrapper(const Cmp& cmp) : cmp_(cmp) {}

  const Cmp& get_compare() const noexcept { return cmp_; }

  template<typename X, typename Y>
  bool operator()(const X& x, const Y& y) const {
    return cmp_(unwrap_(x), unwrap_(y));
  }
};

} /* namespace std::impl */


template<typename Key, typename T, typename Compare = less<Key>,
         typename Allocator = allocator<pair<const Key, T>>>
class map
: private impl::alloc_base<typename allocator_traits<Allocator>::
      template rebind_alloc<impl::set_elem<pair<const Key, T>, void>>>
{
 private:
  using elem = impl::set_elem<pair<const Key, T>, void>;
  using data_type =
      _namespace(ilias)::linked_set<elem, void,
                                    impl::map_cmp_wrapper<Compare,
                                                          Key, T, elem>>;
  using alloc_base = impl::alloc_base<
      typename allocator_traits<Allocator>::template rebind_alloc<elem>>;

 public:
  using key_type = Key;
  using mapped_type = T;
  using value_type = pair<const Key, T>;
  using key_compare = Compare;
  using allocator_type = Allocator;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = typename allocator_traits<allocator_type>::pointer;
  using const_pointer =
      typename allocator_traits<allocator_type>::const_pointer;
  using size_type = typename allocator_traits<allocator_type>::size_type;
  using difference_type =
      typename allocator_traits<allocator_type>::difference_type;
  using iterator =
      impl::set_elem_iter<value_type,
                          typename data_type::iterator>;
  using const_iterator =
      impl::set_elem_iter<const value_type,
                          typename data_type::const_iterator>;
  using reverse_iterator = _namespace(std)::reverse_iterator<iterator>;
  using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator>;

  class value_compare {
    friend class map;

   protected:
    value_compare(Compare c) : comp(c) {}

   public:
    using result_type = bool;
    using first_argument_type = value_type;
    using second_argument_type = value_type;

    bool operator()(const value_type&, const value_type&) const;

   protected:
    Compare comp;
  };

  explicit map(const Compare& = Compare(), const Allocator& = Allocator());
  template<typename InputIter> map(InputIter, InputIter,
                                   const Compare& = Compare(),
                                   const Allocator& = Allocator());
  map(const map&);
  map(map&&);
  explicit map(const Allocator&);
  map(const map&, const Allocator&);
  map(map&&, const Allocator&);
  map(initializer_list<value_type>,
      const Compare& = Compare(),
      const Allocator& = Allocator());
  ~map() noexcept;
  map& operator=(const map&);
  map& operator=(map&&);
  map& operator=(initializer_list<value_type>);
  allocator_type get_allocator() const noexcept;

  iterator begin() noexcept;
  const_iterator begin() const noexcept;
  iterator end() noexcept;
  const_iterator end() const noexcept;

  reverse_iterator rbegin() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  reverse_iterator rend() noexcept;
  const_reverse_iterator rend() const noexcept;

  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  bool empty() const noexcept;
  size_type size() const noexcept;
  size_type max_size() const noexcept;

  mapped_type& operator[](const key_type&);
  mapped_type& operator[](key_type&&);
  mapped_type& at(const key_type&);
  const mapped_type& at(const key_type&) const;

  template<typename... Args> pair<iterator, bool> emplace(Args&&...);
  template<typename... Args> iterator emplace_hint(const_iterator, Args&&...);
  pair<iterator, bool> insert(const value_type&);
  template<typename P>
  enable_if_t<is_convertible<P, value_type>::value, pair<iterator, bool>>
      insert(P&&);
  iterator insert(const_iterator, const value_type&);
  template<typename P>
  enable_if_t<is_convertible<P, value_type>::value, iterator>
      insert(const_iterator, P&&);
  template<typename InputIter> void insert(InputIter, InputIter);
  void insert(initializer_list<value_type>);

  iterator erase(const_iterator) noexcept;
  size_type erase(const key_type&) noexcept;
  iterator erase(const_iterator, const_iterator) noexcept;
  void swap(map&) noexcept;
  void clear() noexcept;

  key_compare key_comp() const;
  value_compare value_comp() const;

  iterator find(const key_type&);
  const_iterator find(const key_type&) const;
  size_type count(const key_type&) const;

  iterator lower_bound(const key_type&);
  const_iterator lower_bound(const key_type&) const;
  iterator upper_bound(const key_type&);
  const_iterator upper_bound(const key_type&) const;

  pair<iterator, iterator> equal_range(const key_type&);
  pair<const_iterator, const_iterator> equal_range(const key_type&) const;

 private:
  data_type data_;
  size_type size_ = 0;
};

template<typename Key, typename T, typename Compare, typename Allocator>
bool operator==(const map<Key, T, Compare, Allocator>&,
                const map<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator<(const map<Key, T, Compare, Allocator>&,
               const map<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator!=(const map<Key, T, Compare, Allocator>&,
                const map<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator>(const map<Key, T, Compare, Allocator>&,
               const map<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator<=(const map<Key, T, Compare, Allocator>&,
                const map<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator>=(const map<Key, T, Compare, Allocator>&,
                const map<Key, T, Compare, Allocator>&);

template<typename Key, typename T, typename Compare, typename Allocator>
void swap(const map<Key, T, Compare, Allocator>&,
          const map<Key, T, Compare, Allocator>&) noexcept;


template<typename Key, typename T, typename Compare = less<Key>,
         typename Allocator = allocator<pair<const Key, T>>>
class multimap
: private impl::alloc_base<typename allocator_traits<Allocator>::
      template rebind_alloc<impl::set_elem<pair<const Key, T>, void>>>
{
 private:
  using elem = impl::set_elem<pair<const Key, T>, void>;
  using data_type =
      _namespace(ilias)::linked_set<elem, void,
                                    impl::map_cmp_wrapper<Compare,
                                                          Key, T, elem>>;
  using alloc_base = impl::alloc_base<
      typename allocator_traits<Allocator>::template rebind_alloc<elem>>;

 public:
  using key_type = Key;
  using mapped_type = T;
  using value_type = pair<const Key, T>;
  using key_compare = Compare;
  using allocator_type = Allocator;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = typename allocator_traits<allocator_type>::pointer;
  using const_pointer =
      typename allocator_traits<allocator_type>::const_pointer;
  using size_type = typename allocator_traits<allocator_type>::size_type;
  using difference_type =
      typename allocator_traits<allocator_type>::difference_type;
  using iterator =
      impl::set_elem_iter<value_type,
                          typename data_type::iterator>;
  using const_iterator =
      impl::set_elem_iter<const value_type,
                          typename data_type::const_iterator>;
  using reverse_iterator = _namespace(std)::reverse_iterator<iterator>;
  using const_reverse_iterator =
      _namespace(std)::reverse_iterator<const_iterator>;

  class value_compare {
    friend class multimap;

   protected:
    value_compare(Compare c) : comp(c) {}

   public:
    using result_type = bool;
    using first_argument_type = value_type;
    using second_argument_type = value_type;

    bool operator()(const value_type&, const value_type&) const;

   protected:
    Compare comp;
  };

  explicit multimap(const Compare& = Compare(),
                    const Allocator& = Allocator());
  template<typename InputIter> multimap(InputIter, InputIter,
                                        const Compare& = Compare(),
                                        const Allocator& = Allocator());
  multimap(const multimap&);
  multimap(multimap&&);
  explicit multimap(const Allocator&);
  multimap(const multimap&, const Allocator&);
  multimap(multimap&&, const Allocator&);
  multimap(initializer_list<value_type>,
      const Compare& = Compare(),
      const Allocator& = Allocator());
  ~multimap() noexcept;
  multimap& operator=(const multimap&);
  multimap& operator=(multimap&&);
  multimap& operator=(initializer_list<value_type>);
  allocator_type get_allocator() const noexcept;

  iterator begin() noexcept;
  const_iterator begin() const noexcept;
  iterator end() noexcept;
  const_iterator end() const noexcept;

  reverse_iterator rbegin() noexcept;
  const_reverse_iterator rbegin() const noexcept;
  reverse_iterator rend() noexcept;
  const_reverse_iterator rend() const noexcept;

  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;
  const_reverse_iterator crbegin() const noexcept;
  const_reverse_iterator crend() const noexcept;

  bool empty() const noexcept;
  size_type size() const noexcept;
  size_type max_size() const noexcept;

  template<typename... Args> iterator emplace(Args&&...);
  template<typename... Args> iterator emplace_hint(const_iterator, Args&&...);
  iterator insert(const value_type&);
  template<typename P>
  enable_if_t<is_convertible<P, value_type>::value, iterator>
      insert(P&&);
  iterator insert(const_iterator, const value_type&);
  template<typename P>
  enable_if_t<is_convertible<P, value_type>::value, iterator>
      insert(const_iterator, P&&);
  template<typename InputIter> void insert(InputIter, InputIter);
  void insert(initializer_list<value_type>);

  iterator erase(const_iterator) noexcept;
  size_type erase(const key_type&) noexcept;
  iterator erase(const_iterator, const_iterator) noexcept;
  void swap(multimap&) noexcept;
  void clear() noexcept;

  key_compare key_comp() const;
  value_compare value_comp() const;

  iterator find(const key_type&);
  const_iterator find(const key_type&) const;
  size_type count(const key_type&) const;

  iterator lower_bound(const key_type&);
  const_iterator lower_bound(const key_type&) const;
  iterator upper_bound(const key_type&);
  const_iterator upper_bound(const key_type&) const;

  pair<iterator, iterator> equal_range(const key_type&);
  pair<const_iterator, const_iterator> equal_range(const key_type&) const;

 private:
  data_type data_;
  size_type size_ = 0;
};

template<typename Key, typename T, typename Compare, typename Allocator>
bool operator==(const multimap<Key, T, Compare, Allocator>&,
                const multimap<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator<(const multimap<Key, T, Compare, Allocator>&,
               const multimap<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator!=(const multimap<Key, T, Compare, Allocator>&,
                const multimap<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator>(const multimap<Key, T, Compare, Allocator>&,
               const multimap<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator<=(const multimap<Key, T, Compare, Allocator>&,
                const multimap<Key, T, Compare, Allocator>&);
template<typename Key, typename T, typename Compare, typename Allocator>
bool operator>=(const multimap<Key, T, Compare, Allocator>&,
                const multimap<Key, T, Compare, Allocator>&);

template<typename Key, typename T, typename Compare, typename Allocator>
void swap(const multimap<Key, T, Compare, Allocator>&,
          const multimap<Key, T, Compare, Allocator>&) noexcept;


_namespace_end(std)

#include <map-inl.h>

#endif /* _MAP_ */

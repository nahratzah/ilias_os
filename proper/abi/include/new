#ifndef _NEW_
#define _NEW_

#include <cdecl.h>
#include <cstddef>
#include <exception>
#include <cdecl.h>

_namespace_begin(std)


class bad_alloc
: public exception
{
 public:
  bad_alloc() noexcept;
  ~bad_alloc() noexcept override;
  const char* what() const noexcept override;
};

class bad_array_new_length
: public exception
{
 public:
  bad_array_new_length() noexcept;
  ~bad_array_new_length() noexcept override;
  const char* what() const noexcept override;
};

struct nothrow_t {};
extern const nothrow_t nothrow;

using new_handler = void (*)();

new_handler get_new_handler() noexcept;
new_handler set_new_handler(new_handler) noexcept;


_cdecl_begin
void __throw_bad_alloc() __attribute__((__noreturn__));
_cdecl_end


_namespace_end(std)


void* operator new(_namespace(std)::size_t);
void* operator new(_namespace(std)::size_t,
                   const _namespace(std)::nothrow_t&) noexcept;
void operator delete(void*) noexcept;
void operator delete(void*, const _namespace(std)::nothrow_t&) noexcept;
void operator delete(void*, _namespace(std)::size_t) noexcept;
void operator delete(void*, _namespace(std)::size_t,
                     const _namespace(std)::nothrow_t&) noexcept;
void* operator new[](_namespace(std)::size_t);
void* operator new[](_namespace(std)::size_t,
                     const _namespace(std)::nothrow_t&) noexcept;
void operator delete[](void*) noexcept;
void operator delete[](void*, const _namespace(std)::nothrow_t&) noexcept;
void operator delete[](void*, _namespace(std)::size_t) noexcept;
void operator delete[](void*, _namespace(std)::size_t,
                       const _namespace(std)::nothrow_t&) noexcept;

inline void* operator new(_namespace(std)::size_t, void* p) noexcept {
  return p;
}
inline void* operator new[](_namespace(std)::size_t, void* p) noexcept {
  return p;
}
inline void operator delete(void*, void*) noexcept {}
inline void operator delete[](void*, void*) noexcept {}

#endif /* _NEW_ */

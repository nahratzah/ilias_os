#ifndef _SSTREAM_
#define _SSTREAM_

#include <cdecl.h>
#include <ios>
#include <streambuf>
#include <istream>
#include <string>
#include <memory>

_namespace_begin(std)


template<typename Char, typename Traits, typename Allocator>
class basic_stringbuf
: public basic_streambuf<Char, Traits>
{
 private:
  struct free_ {
    void operator()(Char*) const noexcept;
  };

 public:
  using char_type = typename basic_streambuf<Char, Traits>::char_type;
  using traits_type = typename basic_streambuf<Char, Traits>::traits_type;
  using allocator_type = Allocator;
  using int_type = typename basic_streambuf<Char, Traits>::int_type;
  using pos_type = typename basic_streambuf<Char, Traits>::pos_type;
  using off_type = typename basic_streambuf<Char, Traits>::off_type;

  explicit basic_stringbuf(ios_base::openmode = ios_base::in | ios_base::out);
  explicit basic_stringbuf(const basic_string<Char, Traits, Allocator>&,
                           ios_base::openmode = ios_base::in | ios_base::out);
  explicit basic_stringbuf(basic_string_ref<Char, Traits>,
                           ios_base::openmode = ios_base::in | ios_base::out);
  basic_stringbuf(basic_stringbuf&&);

  basic_stringbuf& operator=(basic_stringbuf&&);
  void swap(basic_stringbuf&);

  basic_string<char_type, traits_type, allocator_type> str() const;
  void str(const basic_string<char_type, traits_type, allocator_type>&);
  void str(basic_string_ref<char_type, traits_type>);

 protected:
  int_type underflow() override;
  int_type pbackfail(int_type = traits_type::eof()) override;
  int_type overflow(int_type = traits_type::eof()) override;
  basic_streambuf<Char, Traits>* setbuf(char_type*, streamsize) override;

  pos_type seekoff(off_type, ios_base::seekdir,
                   ios_base::openmode = ios_base::in | ios_base::out)
      override;
  pos_type seekpos(pos_type,
                   ios_base::openmode = ios_base::in | ios_base::out)
      override;

  int sync() override;

 private:
  ios_base::openmode mode_;
  basic_string<char_type, traits_type, allocator_type> data_;
  unique_ptr<char_type[], free_> buf_;
};

template<typename Char, typename Traits, typename Allocator>
void swap(basic_stringbuf<Char, Traits, Allocator>&,
          basic_stringbuf<Char, Traits, Allocator>&);


template<typename Char, typename Traits, typename Allocator>
class basic_istringstream;

template<typename Char, typename Traits, typename Allocator>
class basic_ostringstream;

template<typename Char, typename Traits, typename Allocator>
class basic_stringstream;


using stringbuf = basic_stringbuf<char>;
using wstringbuf = basic_stringbuf<wchar_t>;

using istringstream = basic_istringstream<char>;
using wistringstream = basic_istringstream<wchar_t>;

using ostringstream = basic_ostringstream<char>;
using wostringstream = basic_ostringstream<wchar_t>;

using stringstream = basic_stringstream<char>;
using wstringstream = basic_stringstream<wchar_t>;


/*
 * Definitions.
 */


template<typename Char, typename Traits, typename Allocator>
class basic_istringstream
: public basic_istream<Char, Traits>
{
 public:
  using char_type = typename basic_istream<Char, Traits>::char_type;
  using traits_type = typename basic_istream<Char, Traits>::traits_type;
  using int_type = typename basic_istream<Char, Traits>::int_type;
  using pos_type = typename basic_istream<Char, Traits>::pos_type;
  using off_type = typename basic_istream<Char, Traits>::off_type;
  using allocator_type = Allocator;

  explicit basic_istringstream(ios_base::openmode = ios_base::in);
  explicit basic_istringstream(
      const basic_string<char_type, traits_type, allocator_type>&,
      ios_base::openmode = ios_base::in);
  explicit basic_istringstream(
      basic_string_ref<char_type, traits_type>,
      ios_base::openmode = ios_base::in);
  basic_istringstream(basic_istringstream&&);
  ~basic_istringstream() noexcept override = default;

  basic_istringstream& operator=(basic_istringstream&&);
  void swap(basic_istringstream&);

  basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;

  basic_string<char_type, traits_type, allocator_type> str() const;
  void str(const basic_string<char_type, traits_type, allocator_type>&);
  void str(basic_string_ref<char_type, traits_type>);

 private:
  basic_stringbuf<char_type, traits_type, allocator_type> sb_;
};

template<typename Char, typename Traits, typename Allocator>
void swap(basic_istringstream<Char, Traits, Allocator>&,
          basic_istringstream<Char, Traits, Allocator>&);


template<typename Char, typename Traits, typename Allocator>
class basic_ostringstream
: public basic_ostream<Char, Traits>
{
 public:
  using char_type = typename basic_ostream<Char, Traits>::char_type;
  using traits_type = typename basic_ostream<Char, Traits>::traits_type;
  using int_type = typename basic_ostream<Char, Traits>::int_type;
  using pos_type = typename basic_ostream<Char, Traits>::pos_type;
  using off_type = typename basic_ostream<Char, Traits>::off_type;
  using allocator_type = Allocator;

  explicit basic_ostringstream(ios_base::openmode = ios_base::out);
  explicit basic_ostringstream(
      const basic_string<char_type, traits_type, allocator_type>&,
      ios_base::openmode = ios_base::out);
  explicit basic_ostringstream(
      basic_string_ref<char_type, traits_type>,
      ios_base::openmode = ios_base::out);
  basic_ostringstream(basic_ostringstream&&);
  ~basic_ostringstream() noexcept override = default;

  basic_ostringstream& operator=(basic_ostringstream&&);
  void swap(basic_ostringstream&);

  basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;

  basic_string<char_type, traits_type, allocator_type> str() const;
  void str(const basic_string<char_type, traits_type, allocator_type>&);
  void str(basic_string_ref<char_type, traits_type>);

 private:
  basic_stringbuf<char_type, traits_type, allocator_type> sb_;
};

template<typename Char, typename Traits, typename Allocator>
void swap(basic_ostringstream<Char, Traits, Allocator>&,
          basic_ostringstream<Char, Traits, Allocator>&);



template<typename Char, typename Traits, typename Allocator>
class basic_stringstream
: public basic_iostream<Char, Traits>
{
 public:
  using char_type = typename basic_iostream<Char, Traits>::char_type;
  using traits_type = typename basic_iostream<Char, Traits>::traits_type;
  using int_type = typename basic_iostream<Char, Traits>::int_type;
  using pos_type = typename basic_iostream<Char, Traits>::pos_type;
  using off_type = typename basic_iostream<Char, Traits>::off_type;
  using allocator_type = Allocator;

  explicit basic_stringstream(
      ios_base::openmode = ios_base::in | ios_base::out);
  explicit basic_stringstream(
      const basic_string<char_type, traits_type, allocator_type>&,
      ios_base::openmode = ios_base::in | ios_base::out);
  explicit basic_stringstream(
      basic_string_ref<char_type, traits_type>,
      ios_base::openmode = ios_base::in | ios_base::out);
  basic_stringstream(basic_stringstream&&);
  ~basic_stringstream() noexcept override = default;

  basic_stringstream& operator=(basic_stringstream&&);
  void swap(basic_stringstream&);

  basic_stringbuf<char_type, traits_type, allocator_type>* rdbuf() const;

  basic_string<char_type, traits_type, allocator_type> str() const;
  void str(const basic_string<char_type, traits_type, allocator_type>&);
  void str(basic_string_ref<char_type, traits_type>);

 private:
  basic_stringbuf<char_type, traits_type, allocator_type> sb_;
};

template<typename Char, typename Traits, typename Allocator>
void swap(basic_stringstream<Char, Traits, Allocator>&,
          basic_stringstream<Char, Traits, Allocator>&);


extern template class basic_stringbuf<char>;
extern template class basic_stringbuf<char16_t>;
extern template class basic_stringbuf<char32_t>;
extern template class basic_stringbuf<wchar_t>;

extern template class basic_istringstream<char>;
extern template class basic_istringstream<char16_t>;
extern template class basic_istringstream<char32_t>;
extern template class basic_istringstream<wchar_t>;

extern template class basic_ostringstream<char>;
extern template class basic_ostringstream<char16_t>;
extern template class basic_ostringstream<char32_t>;
extern template class basic_ostringstream<wchar_t>;

extern template class basic_stringstream<char>;
extern template class basic_stringstream<char16_t>;
extern template class basic_stringstream<char32_t>;
extern template class basic_stringstream<wchar_t>;


_namespace_end(std)

#include <sstream-inl.h>

#endif /* _SSTREAM_ */

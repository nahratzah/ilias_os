#ifndef _THREAD_
#define _THREAD_

#include <cdecl.h>
#include <atomic>
#include <utility>
#include <stdimpl/once_flag.h>
#include <abi/semaphore.h>

_namespace_begin(std)
namespace impl {

struct owner_tag_;

} /* namespace std::impl */


class mutex {
 public:
  constexpr mutex() noexcept = default;
  ~mutex() noexcept;

  mutex(const mutex&) = delete;
  mutex& operator=(const mutex&) = delete;

  void lock();
  bool try_lock() noexcept;
  void unlock() noexcept;

  using native_handle_type = abi::semaphore&;
  native_handle_type native_handle();

 private:
  atomic<const void*> owner_tag_{ nullptr };
  abi::semaphore impl_{ 1U };
};


template<typename Callable, typename... Args>
void call_once(once_flag& flag, Callable&& func, Args&&... args)
    noexcept(noexcept(func(forward<Args>(args)...)));


_namespace_end(std)

#include <mutex-inl.h>

#endif /* _THREAD_ */

#ifndef _OSTREAM_
#define _OSTREAM_

#include <cdecl.h>
#include <ios>
#include <cstdint>
#include <type_traits>

_namespace_begin(std)
namespace impl {

template<typename Char, typename Traits, typename SChar, typename STraits>
auto op_lshift_stream(basic_ostream<Char, Traits>&,
                      basic_string_ref<Char, Traits>) ->
    enable_if_t<is_same<Char, SChar>::value, basic_ostream<Char, Traits>&>;

template<typename Char, typename Traits, typename SChar, typename STraits,
         typename Fn>
auto op_lshift_stream(basic_ostream<Char, Traits>&,
                      basic_string_ref<Char, Traits>,
                      Fn) ->
    enable_if_t<!is_same<Char, SChar>::value, basic_ostream<Char, Traits>&>;

} /* namespace impl */


template<typename Char, typename Traits>
class basic_ostream
: public basic_ios<Char, Traits>
{
  template<typename OChar, typename OTraits, typename SChar, typename STraits>
  friend auto op_lshift_stream(basic_ostream<OChar, OTraits>&,
                               basic_string_ref<Char, Traits>) ->
      enable_if_t<is_same<Char, SChar>::value, basic_ostream<Char, Traits>&>;

  template<typename OChar, typename OTraits, typename SChar, typename STraits,
           typename Fn>
  friend auto op_lshift_stream(basic_ostream<OChar, OTraits>&,
                               basic_string_ref<Char, Traits>,
                               Fn) ->
      enable_if_t<!is_same<Char, SChar>::value, basic_ostream<Char, Traits>&>;

 public:
  using char_type = typename basic_ios<Char, Traits>::char_type;
  using traits_type = typename basic_ios<Char, Traits>::traits_type;
  using int_type = typename basic_ios<Char, Traits>::int_type;
  using pos_type = typename basic_ios<Char, Traits>::pos_type;
  using off_type = typename basic_ios<Char, Traits>::off_type;

  explicit basic_ostream(basic_streambuf<char_type, traits_type>*);
  ~basic_ostream() noexcept override;

  class sentry;

  basic_ostream& operator<< (basic_ostream& (*)(basic_ostream&));
  basic_ostream& operator<< (
      basic_ios<Char, Traits>& (*)(basic_ios<Char, Traits>&));
  basic_ostream& operator<< (ios_base& (*)(ios_base&));

  basic_ostream& operator<< (bool);
  basic_ostream& operator<< (short);
  basic_ostream& operator<< (unsigned short);
  basic_ostream& operator<< (int);
  basic_ostream& operator<< (unsigned int);
  basic_ostream& operator<< (long);
  basic_ostream& operator<< (unsigned long);
  basic_ostream& operator<< (long long);
  basic_ostream& operator<< (unsigned long long);
#if _USE_INT128
  basic_ostream& operator<< (int128_t);
  basic_ostream& operator<< (uint128_t);
#endif
  basic_ostream& operator<< (float);
  basic_ostream& operator<< (double);
  basic_ostream& operator<< (long double);
  basic_ostream& operator<< (const void*);
  basic_ostream& operator<< (basic_streambuf<Char, Traits>*);

  basic_ostream& put(char_type);
  basic_ostream& write(const char_type*, streamsize);

  basic_ostream& flush();

  pos_type tellp();
  basic_ostream& seekp(pos_type);
  basic_ostream& seekp(off_type, ios_base::seekdir);

 protected:
  basic_ostream(basic_ostream&&);
  basic_ostream& operator=(basic_ostream&&);
  void swap(basic_ostream&);

 private:
  template<typename Fn, typename... Args>
  basic_ostream& op_lshift_(Fn, Args&&...);

  template<typename Fn, typename... Args>
  basic_ostream& unformatted_(Fn, Args&&...);
};

template<typename Char, typename Traits>
basic_ostream<Char, Traits>& operator<< (basic_ostream<Char, Traits>&, Char);
template<typename Char, typename Traits>
basic_ostream<Char, Traits>& operator<< (basic_ostream<Char, Traits>&, char);
template<typename Traits>
basic_ostream<char, Traits>& operator<< (basic_ostream<char, Traits>&, char);
template<typename Traits>
basic_ostream<char, Traits>& operator<< (basic_ostream<char, Traits>&,
                                         signed char);
template<typename Traits>
basic_ostream<char, Traits>& operator<< (basic_ostream<char, Traits>&,
                                         unsigned char);

template<typename Char, typename Traits>
basic_ostream<Char, Traits>& operator<< (basic_ostream<Char, Traits>&,
                                         const Char*);
template<typename Char, typename Traits>
basic_ostream<Char, Traits>& operator<< (basic_ostream<Char, Traits>&,
                                         const char*);
template<typename Traits>
basic_ostream<char, Traits>& operator<< (basic_ostream<char, Traits>&,
                                         const char*);
template<typename Traits>
basic_ostream<char, Traits>& operator<< (basic_ostream<char, Traits>&,
                                         const signed char*);
template<typename Traits>
basic_ostream<char, Traits>& operator<< (basic_ostream<char, Traits>&,
                                         const unsigned char*);


template<typename Char, typename Traits>
class basic_ostream<Char, Traits>::sentry {
 public:
  explicit sentry(basic_ostream&);
  ~sentry() noexcept;
  explicit operator bool() const noexcept;

  sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;

 private:
  basic_ostream& os_;
  bool ok_;
};


using ostream = basic_ostream<char>;
using wostream = basic_ostream<wchar_t>;

template<typename Char, typename Traits>
basic_ostream<Char, Traits>& endl(basic_ostream<Char, Traits>&);
template<typename Char, typename Traits>
basic_ostream<Char, Traits>& ends(basic_ostream<Char, Traits>&);
template<typename Char, typename Traits>
basic_ostream<Char, Traits>& flush(basic_ostream<Char, Traits>&);

template<typename Char, typename Traits, typename T>
basic_ostream<Char, Traits>& operator<< (basic_ostream<Char, Traits>&&,
                                         const T&);


extern template class basic_ostream<char>;
extern template class basic_ostream<char16_t>;
extern template class basic_ostream<char32_t>;
extern template class basic_ostream<wchar_t>;

extern template basic_ostream<char>& operator<< (basic_ostream<char>&,
                                                 char);
extern template basic_ostream<char16_t>& operator<< (basic_ostream<char16_t>&,
                                                     char16_t);
extern template basic_ostream<char32_t>& operator<< (basic_ostream<char32_t>&,
                                                     char32_t);
extern template basic_ostream<wchar_t>& operator<< (basic_ostream<wchar_t>&,
                                                    wchar_t);
extern template basic_ostream<char16_t>& operator<< (basic_ostream<char16_t>&,
                                                     char);
extern template basic_ostream<char32_t>& operator<< (basic_ostream<char32_t>&,
                                                     char);
extern template basic_ostream<wchar_t>& operator<< (basic_ostream<wchar_t>&,
                                                    char);

extern template basic_ostream<char>& operator<< (basic_ostream<char>&,
                                                 const char*);
extern template basic_ostream<char16_t>& operator<< (basic_ostream<char16_t>&,
                                                     const char16_t*);
extern template basic_ostream<char32_t>& operator<< (basic_ostream<char32_t>&,
                                                     const char32_t*);
extern template basic_ostream<wchar_t>& operator<< (basic_ostream<wchar_t>&,
                                                    const wchar_t*);
extern template basic_ostream<char16_t>& operator<< (basic_ostream<char16_t>&,
                                                     const char*);
extern template basic_ostream<char32_t>& operator<< (basic_ostream<char32_t>&,
                                                     const char*);
extern template basic_ostream<wchar_t>& operator<< (basic_ostream<wchar_t>&,
                                                    const char*);

extern template basic_ostream<char>& endl(basic_ostream<char>&);
extern template basic_ostream<char16_t>& endl(basic_ostream<char16_t>&);
extern template basic_ostream<char32_t>& endl(basic_ostream<char32_t>&);
extern template basic_ostream<wchar_t>& endl(basic_ostream<wchar_t>&);

extern template basic_ostream<char>& ends(basic_ostream<char>&);
extern template basic_ostream<char16_t>& ends(basic_ostream<char16_t>&);
extern template basic_ostream<char32_t>& ends(basic_ostream<char32_t>&);
extern template basic_ostream<wchar_t>& ends(basic_ostream<wchar_t>&);

extern template basic_ostream<char>& flush(basic_ostream<char>&);
extern template basic_ostream<char16_t>& flush(basic_ostream<char16_t>&);
extern template basic_ostream<char32_t>& flush(basic_ostream<char32_t>&);
extern template basic_ostream<wchar_t>& flush(basic_ostream<wchar_t>&);


_namespace_end(std)

#include <ostream-inl.h>

#endif /* _OSTREAM_ */

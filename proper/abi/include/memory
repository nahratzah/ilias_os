#ifndef _MEMORY_
#define _MEMORY_

#include <cdecl.h>
#include <cstddef>
#include <limits>
#include <new>
#include <utility>
#include <stdimpl/alloc_traits.h>

_namespace_begin(std)


template<typename T> T* addressof(T&) noexcept;

template<typename T> class allocator;

template<> class allocator<void> {
 public:
  using value_type = void;
  using pointer = void*;
  using const_pointer = const void*;
  using propagate_on_container_move_assignment = true_type;
  template<typename U> struct rebind { typedef allocator<U> other; };

  allocator() = default;
  allocator(const allocator&) = default;
  template<typename U> allocator(const allocator<U>&) noexcept;
};

template<typename T> class allocator {
 public:
  using value_type = T;
  using pointer = T*;
  using const_pointer = const T*;
  using reference = T&;
  using const_reference = const T&;
  using size_type = size_t;
  using difference_type = ptrdiff_t;
  using propagate_on_container_move_assignment = true_type;
  template<typename U> struct rebind { typedef allocator<U> other; };

  allocator() = default;
  allocator(const allocator&) = default;
  template<typename U> allocator(const allocator<U>&) noexcept;

  pointer address(reference x) const noexcept;
  const_pointer address(const_reference x) const noexcept;
  pointer allocate(size_type, allocator<void>::const_pointer = nullptr);
  void deallocate(pointer, size_type);
  size_type max_size() const noexcept;

  template<typename U, typename... Args> void construct(U* p, Args&&... args)
      noexcept(noexcept(::new (static_cast<void*>(p))
                              U(forward<Args>(args)...)));

  template<typename U> void destroy(U* p)
      noexcept(noexcept(p->~U()));
};

template<typename T, typename U>
bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
template<typename T, typename U>
bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;

template<typename Ptr> struct pointer_traits {
 private:
  template<typename P> static auto select_difftype_(P = declval<Ptr>()) ->
      typename P::difference_type;
  static auto select_difftype_(...) -> ptrdiff_t;

 public:
  using pointer = Ptr;
  using element_type = typename pointer::element_type;
  using difference_type = decltype(select_difftype_());

  /* XXX rebind. */

  inline pointer pointer_to(element_type& r) { return pointer::pointer_to(r); }
};

template<typename T> struct pointer_traits<T*> {
  using pointer = T*;
  using element_type = T;
  using difference_type = ptrdiff_t;
  template<typename U> using rebind = U*;

  inline pointer pointer_to(element_type& r) { return addressof(r); }
};

template<typename Alloc> struct allocator_traits {
  using value_type = typename Alloc::value_type;
  using reference = typename impl::alloc_traits<Alloc>::reference;
  using const_reference = typename impl::alloc_traits<Alloc>::const_reference;
  using pointer = typename impl::alloc_traits<Alloc>::pointer;
  using const_pointer = typename impl::alloc_traits<Alloc>::const_pointer;
  using size_type = typename impl::alloc_traits<Alloc>::size_type;
  using difference_type = typename impl::alloc_traits<Alloc>::difference_type;
  using void_pointer = typename impl::alloc_traits<Alloc>::void_pointer;
  using const_void_pointer =
      typename impl::alloc_traits<Alloc>::const_void_pointer;

  using propagate_on_container_copy_assignment = typename
      impl::alloc_traits<Alloc>::propagate_on_container_copy_assignment;
  using propagate_on_container_move_assignment = typename
      impl::alloc_traits<Alloc>::propagate_on_container_move_assignment;
  using propagate_on_container_swap = typename
      impl::alloc_traits<Alloc>::propagate_on_container_swap;

  template<typename T> using rebind_alloc = typename
      impl::alloc_traits<Alloc>::template rebind_alloc<T>;
  template<typename T> using rebind_traits =
      allocator_traits<rebind_alloc<T>>;

  static pointer allocate(Alloc& alloc, size_type,
                          const_void_pointer = nullptr);
  static void deallocate(Alloc& alloc, pointer p, size_type n)
      noexcept(noexcept(alloc.deallocate(p, n)));

  template<typename T, typename... Args> static void construct(
      Alloc& alloc, T* p, Args&&... args)
      noexcept(noexcept(impl::alloc_traits<Alloc>::construct(
          alloc, p, forward<Args>(args)...)));

  template<typename T> static void destroy(Alloc& alloc, T* p)
      noexcept(noexcept(impl::alloc_traits<Alloc>::destroy(alloc, p)));

  static size_type max_size(const Alloc& a)
      noexcept(noexcept(impl::alloc_traits<Alloc>::max_size(a)));
};


_namespace_end(std)

#include <memory-inl.h>

#endif /* _MEMORY_ */

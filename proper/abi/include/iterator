#ifndef _ITERATOR_
#define _ITERATOR_

#include <cdecl.h>
#include <cstddef>
#include <initializer_list>
#include <iosfwd>
#include <type_traits>
#include <utility>

_namespace_begin(std)


struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};

template<typename Iterator> struct iterator_traits {
  using difference_type = typename Iterator::difference_type;
  using value_type = typename Iterator::value_type;
  using pointer = typename Iterator::pointer;
  using reference = typename Iterator::reference;
  using iterator_category = typename Iterator::iterator_category;
};

template<typename T> struct iterator_traits<T*> {
  using difference_type = ptrdiff_t;
  using value_type = T;
  using pointer = T*;
  using reference = T&;
  using iterator_category = random_access_iterator_tag;
};

template<typename T> struct iterator_traits<const T*> {
  using difference_type = ptrdiff_t;
  using value_type = T;
  using pointer = const T*;
  using reference = const T&;
  using iterator_category = random_access_iterator_tag;
};

template<typename Category, typename T, typename Distance = ptrdiff_t,
         typename Pointer = T*, typename Reference = T&> struct iterator {
  using value_type = T;
  using difference_type = Distance;
  using pointer = Pointer;
  using reference = Reference;
  using iterator_category = Category;
};

template<typename Iterator>
class reverse_iterator
: public iterator<typename iterator_traits<Iterator>::iterator_category,
                  typename iterator_traits<Iterator>::value_type,
                  typename iterator_traits<Iterator>::difference_type,
                  typename iterator_traits<Iterator>::pointer,
                  typename iterator_traits<Iterator>::reference> {
 public:
  using iterator_type = Iterator;
  using difference_type = typename iterator_traits<Iterator>::difference_type;
  using pointer = typename iterator_traits<Iterator>::pointer;
  using reference = typename iterator_traits<Iterator>::reference;

  reverse_iterator() = default;
  reverse_iterator(const reverse_iterator&) = default;
  reverse_iterator& operator=(const reverse_iterator&) = default;

  explicit reverse_iterator(iterator_type)
      noexcept(is_nothrow_copy_constructible<iterator_type>::value);
  template<typename U> reverse_iterator(const reverse_iterator<U>&);
  template<typename U> reverse_iterator& operator=(const reverse_iterator<U>&);

  iterator_type base() const
      noexcept(is_nothrow_copy_constructible<iterator_type>::value);
  reference operator*() const;
  pointer operator->() const;
  auto operator[](difference_type) const ->
      conditional_t<
          is_base_of<random_access_iterator_tag,
                     typename iterator_traits<Iterator>::iterator_category
                    >::value,
          typename iterator_traits<Iterator>::reference,
          void>;

  reverse_iterator& operator++();
  reverse_iterator& operator--();
  reverse_iterator operator++(int);
  reverse_iterator operator--(int);
  reverse_iterator operator+(difference_type) const;
  reverse_iterator operator-(difference_type) const;
  reverse_iterator& operator+=(difference_type);
  reverse_iterator& operator-=(difference_type);

 private:
  iterator_type i_;
};

template<typename I1, typename I2>
bool operator==(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(a.base() == b.base()));
template<typename I1, typename I2>
bool operator!=(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(a.base() != b.base()));
template<typename I1, typename I2>
bool operator<(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(a.base() > b.base()));
template<typename I1, typename I2>
bool operator>(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(a.base() < b.base()));
template<typename I1, typename I2>
bool operator<=(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(a.base() >= b.base()));
template<typename I1, typename I2>
bool operator>=(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(a.base() <= b.base()));

template<typename Iterator>
auto operator+(typename reverse_iterator<Iterator>::difference_type n,
               const reverse_iterator<Iterator>& i)
    noexcept(noexcept(i + n)) -> reverse_iterator<Iterator>;
template<typename Iterator>
auto operator-(const reverse_iterator<Iterator>& a,
               const reverse_iterator<Iterator>& b)
    noexcept(noexcept(b.base() - a.base())) ->
    typename reverse_iterator<Iterator>::difference_type;
template<typename I1, typename I2>
auto operator-(const reverse_iterator<I1>& a, const reverse_iterator<I2>& b)
    noexcept(noexcept(b.base() - a.base())) ->
    decltype(b.base() - a.base());


template<typename InputIterator, typename Distance>
void advance(InputIterator&, Distance);

template<typename InputIterator>
typename iterator_traits<InputIterator>::difference_type distance(
    InputIterator, InputIterator);

template<typename ForwardIterator>
ForwardIterator next(
    ForwardIterator,
    typename iterator_traits<ForwardIterator>::difference_type = 1);

template<typename BidirectionalIterator>
BidirectionalIterator prev(
    BidirectionalIterator,
    typename iterator_traits<BidirectionalIterator>::difference_type = 1);


template<typename Container>
class back_insert_iterator
: public iterator<output_iterator_tag, void, void, void, void>
{
 public:
  using container_type = Container;

  explicit back_insert_iterator(Container&);
  back_insert_iterator& operator=(const typename Container::value_type&);
  back_insert_iterator& operator=(typename Container::value_type&&);

  back_insert_iterator& operator*();
  back_insert_iterator& operator++();
  back_insert_iterator operator++(int);

 protected:
  Container* container;
};

template<typename Container>
back_insert_iterator<Container> back_inserter(Container&);

template<typename Container>
class front_insert_iterator
: public iterator<output_iterator_tag, void, void, void, void>
{
 public:
  using container_type = Container;

  explicit front_insert_iterator(Container&);
  front_insert_iterator& operator=(const typename Container::value_type&);
  front_insert_iterator& operator=(typename Container::value_type&&);

  front_insert_iterator& operator*();
  front_insert_iterator& operator++();
  front_insert_iterator operator++(int);

 protected:
  Container* container;
};

template<typename Container>
front_insert_iterator<Container> front_inserter(Container&);

template<typename Container>
class insert_iterator
: public iterator<output_iterator_tag, void, void, void, void>
{
 public:
  using container_type = Container;

  insert_iterator(Container&, typename Container::iterator);
  insert_iterator& operator=(const typename Container::value_type&);
  insert_iterator& operator=(typename Container::value_type&&);

  insert_iterator& operator*();
  insert_iterator& operator++();
  insert_iterator operator++(int);

 protected:
  Container* container;
  typename Container::iterator iter;
};

template<typename Container>
insert_iterator<Container> inserter(Container&, typename Container::iterator);


template<typename Iterator>
class move_iterator {
 public:
  using iterator_type = Iterator;
  using difference_type = typename iterator_traits<Iterator>::difference_type;
  using pointer = Iterator;
  using value_type = typename iterator_traits<Iterator>::value_type;
  using iterator_category =
      typename iterator_traits<Iterator>::iterator_category;
  using reference = value_type&&;

  move_iterator() = default;
  explicit move_iterator(Iterator);
  template<typename U> move_iterator(const move_iterator<U>&);
  template<typename U> move_iterator& operator=(const move_iterator<U>&);

  iterator_type base() const;
  reference operator*() const;
  pointer operator->() const;

  move_iterator& operator++();
  move_iterator operator++(int);
  move_iterator& operator--();
  move_iterator operator--(int);

  move_iterator operator+(difference_type) const;
  move_iterator& operator+=(difference_type);
  move_iterator operator-(difference_type) const;
  move_iterator& operator-=(difference_type);
  auto operator[](difference_type n) const -> reference;

 private:
  Iterator iter_;
};

template<typename Iterator1, typename Iterator2>
bool operator==(const move_iterator<Iterator1>&,
                const move_iterator<Iterator2>&);
template<typename Iterator1, typename Iterator2>
bool operator!=(const move_iterator<Iterator1>&,
                const move_iterator<Iterator2>&);
template<typename Iterator1, typename Iterator2>
bool operator<(const move_iterator<Iterator1>&,
               const move_iterator<Iterator2>&);
template<typename Iterator1, typename Iterator2>
bool operator<=(const move_iterator<Iterator1>&,
                const move_iterator<Iterator2>&);
template<typename Iterator1, typename Iterator2>
bool operator>(const move_iterator<Iterator1>&,
               const move_iterator<Iterator2>&);
template<typename Iterator1, typename Iterator2>
bool operator>=(const move_iterator<Iterator1>&,
                const move_iterator<Iterator2>&);

template<typename Iterator1, typename Iterator2>
auto operator-(const move_iterator<Iterator1>& x,
               const move_iterator<Iterator2>& y) ->
    decltype(x.base() - y.base());
template<typename Iterator>
move_iterator<Iterator> operator+(
    typename move_iterator<Iterator>::difference_type,
    const move_iterator<Iterator>&);

template<typename Iterator>
move_iterator<Iterator> make_move_iterator(Iterator);


template<typename, typename Char = char, typename = char_traits<Char>,
         typename = ptrdiff_t>
class istream_iterator;

template<typename T, typename Char, typename Traits, typename Distance>
bool operator==(const istream_iterator<T, Char, Traits, Distance>&,
                const istream_iterator<T, Char, Traits, Distance>&);
template<typename T, typename Char, typename Traits, typename Distance>
bool operator!=(const istream_iterator<T, Char, Traits, Distance>&,
                const istream_iterator<T, Char, Traits, Distance>&);

template<typename T, typename Char, typename Traits, typename Distance>
class istream_iterator
: public iterator<input_iterator_tag, T, Distance, const T*, const T&>
{
  template<typename OT, typename OChar, typename OTraits, typename ODistance>
  friend bool operator==(const istream_iterator<OT, OChar, OTraits,
                                                ODistance>&,
                         const istream_iterator<OT, OChar, OTraits,
                                                ODistance>&);
  template<typename OT, typename OChar, typename OTraits, typename ODistance>
  friend bool operator!=(const istream_iterator<OT, OChar, OTraits,
                                                ODistance>&,
                         const istream_iterator<OT, OChar, OTraits,
                                                ODistance>&);

 public:
  using char_type = Char;
  using traits_type = Traits;
  using istream_type = basic_istream<Char, Traits>;

  constexpr istream_iterator() : value_() {}
  istream_iterator(istream_type&);
  istream_iterator(const istream_iterator&) = default;
  ~istream_iterator() noexcept = default;

  const T& operator*() const;
  const T* operator->() const;
  istream_iterator& operator++();
  istream_iterator operator++(int);

 private:
  istream_type* in_ = nullptr;
  T value_;
};

template<typename T, typename Char = char, typename Traits = char_traits<Char>>
class ostream_iterator
: public iterator<output_iterator_tag, void, void, void, void>
{
 public:
  using char_type = Char;
  using traits_type = Traits;
  using ostream_type = basic_ostream<Char, Traits>;

  ostream_iterator(ostream_type&);
  ostream_iterator(ostream_type&, const Char*);
  ostream_iterator(ostream_type&, basic_string_ref<Char, Traits>);
  ostream_iterator(const ostream_iterator&) = default;
  ~ostream_iterator() noexcept = default;

  ostream_iterator& operator=(const T&);

  ostream_iterator& operator*();
  ostream_iterator& operator++();
  ostream_iterator& operator++(int);

 private:
  basic_ostream<Char, Traits>* out_;
  basic_string_ref<Char, Traits> delim_;
};


namespace impl {

template<typename Char, typename Traits>
class istreambuf_iterator_proxy {
  template<typename, typename>
  friend class _namespace(std)::istreambuf_iterator;

 public:
  Char operator*();
  const Char* operator->() const;

 private:
  istreambuf_iterator_proxy(Char, basic_streambuf<Char, Traits>*);

  basic_streambuf<Char, Traits>* sbuf_ = nullptr;
  Char keep_;
};

} /* namespace std::impl */

template<typename Char, typename Traits>
class istreambuf_iterator
: public iterator<input_iterator_tag, Char, typename Traits::off_type,
                  impl::istreambuf_iterator_proxy<Char, Traits>, Char>
{
 public:
  using char_type = Char;
  using traits_type = Traits;
  using int_type = typename traits_type::int_type;
  using streambuf_type = basic_streambuf<Char, Traits>;
  using istream_type = basic_istream<Char, Traits>;

  constexpr istreambuf_iterator() noexcept = default;
  istreambuf_iterator(const istreambuf_iterator&) noexcept = default;
  ~istreambuf_iterator() noexcept = default;
  istreambuf_iterator(istream_type&) noexcept;
  istreambuf_iterator(streambuf_type*) noexcept;
  istreambuf_iterator(const impl::istreambuf_iterator_proxy<Char, Traits>&)
      noexcept;
  Char operator*() const;
  impl::istreambuf_iterator_proxy<Char, Traits> operator->() const;
  istreambuf_iterator& operator++();
  impl::istreambuf_iterator_proxy<Char, Traits> operator++(int);
  bool equal(const istreambuf_iterator&) const;

 private:
  streambuf_type* sbuf_ = nullptr;
};

template<typename Char, typename Traits>
bool operator==(const istreambuf_iterator<Char, Traits>&,
                const istreambuf_iterator<Char, Traits>&);
template<typename Char, typename Traits>
bool operator!=(const istreambuf_iterator<Char, Traits>&,
                const istreambuf_iterator<Char, Traits>&);


template<typename Char, typename Traits>
class ostreambuf_iterator
: public iterator<output_iterator_tag, void, void, void, void>
{
 public:
  using char_type = Char;
  using traits_type = Traits;
  using streambuf_type = basic_streambuf<Char, Traits>;
  using ostream_type = basic_ostream<Char, Traits>;

  ostreambuf_iterator(ostream_type&) noexcept;
  ostreambuf_iterator(streambuf_type*) noexcept;
  ostreambuf_iterator& operator=(Char);

  ostreambuf_iterator& operator*();
  ostreambuf_iterator& operator++();
  ostreambuf_iterator& operator++(int);
  bool failed() const noexcept;

 private:
  streambuf_type* sbuf_;
  bool failed_ = false;
};


template<typename C> auto begin(C& c) -> decltype(c.begin());
template<typename C> auto begin(const C& c) -> decltype(c.begin());
template<typename C> auto end(C& c) -> decltype(c.end());
template<typename C> auto end(const C& c) -> decltype(c.end());
template<typename T, size_t N> T* begin(T (&array)[N]);
template<typename T, size_t N> T* end(T (&array)[N]);
template<typename C> auto cbegin(const C& c) ->
    decltype(_namespace(std)::begin(c));
template<typename C> auto cend(const C& c) ->
    decltype(_namespace(std)::end(c));
template<typename C> auto rbegin(C& c) -> decltype(c.rbegin());
template<typename C> auto rbegin(const C& c) -> decltype(c.rbegin());
template<typename C> auto rend(C& c) -> decltype(c.rend());
template<typename C> auto rend(const C& c) -> decltype(c.rend());
template<typename T, size_t N> reverse_iterator<T*> rbegin(T (&array)[N]);
template<typename T, size_t N> reverse_iterator<T*> rend(T (&array)[N]);
template<typename E> reverse_iterator<const E*> rbegin(initializer_list<E>);
template<typename E> reverse_iterator<const E*> rend(initializer_list<E>);
template<typename C> auto crbegin(const C& c) ->
    decltype(_namespace(std)::rbegin(c));
template<typename C> auto crend(const C& c) ->
    decltype(_namespace(std)::rend(c));


_namespace_end(std)

#include <iterator-inl.h>

#endif /* _ITERATOR_ */

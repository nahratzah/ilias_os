#ifndef _ITERATOR_
#define _ITERATOR_

#include <cdecl.h>
#include <cstddef>
#include <type_traits>
#include <utility>

_namespace_begin(std)


struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};

template<typename Iterator> struct iterator_traits {
  using difference_type = typename Iterator::difference_type;
  using value_type = typename Iterator::value_type;
  using pointer = typename Iterator::pointer;
  using reference = typename Iterator::reference;
  using iterator_category = typename Iterator::iterator_category;
};

template<typename T> struct iterator_traits<T*> {
  using difference_type = ptrdiff_t;
  using value_type = T;
  using pointer = T*;
  using reference = T&;
  using iterator_category = random_access_iterator_tag;
};

template<typename T> struct iterator_traits<const T*> {
  using difference_type = ptrdiff_t;
  using value_type = T;
  using pointer = const T*;
  using reference = const T&;
  using iterator_category = random_access_iterator_tag;
};

template<typename Category, typename T, typename Distance = ptrdiff_t,
         typename Pointer = T*, typename Reference = T&> struct iterator {
  using value_type = T;
  using difference_type = Distance;
  using pointer = Pointer;
  using reference = Reference;
  using iterator_category = Category;
};

template<typename Iterator>
class reverse_iterator
: public iterator<typename iterator_traits<Iterator>::iterator_category,
                  typename iterator_traits<Iterator>::value_type,
                  typename iterator_traits<Iterator>::difference_type,
                  typename iterator_traits<Iterator>::pointer,
                  typename iterator_traits<Iterator>::reference> {
 public:
  using iterator_type = Iterator;
  using difference_type = typename iterator_traits<Iterator>::difference_type;
  using pointer = typename iterator_traits<Iterator>::pointer;
  using reference = typename iterator_traits<Iterator>::reference;

  reverse_iterator() = default;
  reverse_iterator(const reverse_iterator&) = default;
  reverse_iterator& operator=(const reverse_iterator&) = default;

  explicit reverse_iterator(iterator_type)
      noexcept(is_nothrow_copy_constructible<iterator_type>::value);
  template<typename U> reverse_iterator(const reverse_iterator<U>&);
  template<typename U> reverse_iterator& operator=(const reverse_iterator<U>&);

  iterator_type base() const
      noexcept(is_nothrow_copy_constructible<iterator_type>::value);
  reference operator*() const;
  pointer operator->() const;
  auto operator[](difference_type) const
      noexcept(declval<iterator_type>()[0]) ->
      decltype(declval<iterator_type>()[0]);

  reverse_iterator& operator++();
  reverse_iterator& operator--();
  reverse_iterator operator++(int);
  reverse_iterator operator--(int);
  reverse_iterator operator+(difference_type) const;
  reverse_iterator operator-(difference_type) const;
  reverse_iterator& operator+=(difference_type);
  reverse_iterator& operator-=(difference_type);

 private:
  iterator_type i_;
};


template<typename InputIterator, typename Distance>
void advance(InputIterator&, Distance);

template<typename InputIterator>
typename iterator_traits<InputIterator>::difference_type distance(
    InputIterator, InputIterator);

template<typename ForwardIterator>
ForwardIterator next(
    ForwardIterator,
    typename iterator_traits<ForwardIterator>::difference_type = 1);

template<typename BidirectionalIterator>
BidirectionalIterator prev(
    BidirectionalIterator,
    typename iterator_traits<BidirectionalIterator>::difference_type = 1);


_namespace_end(std)

#include <iterator-inl.h>

#endif /* _ITERATOR_ */

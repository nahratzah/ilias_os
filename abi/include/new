#ifndef _NEW_
#define _NEW_

#include <cstddef>
#include <exception>

namespace std {


class bad_alloc
: public exception
{
 public:
  ~bad_alloc() noexcept override;
  const char* what() const noexcept override;
};

class bad_array_new_length
: public exception
{
 public:
  ~bad_array_new_length() noexcept override;
  const char* what() const noexcept override;
};

struct nothrow_t {};
extern const nothrow_t nothrow;

using new_handler = void (*)();

new_handler get_new_handler() noexcept;
new_handler set_new_handler(new_handler) noexcept;


} /* namespace std */


void* operator new(std::size_t);
void* operator new(std::size_t, const std::nothrow_t&) noexcept;
void operator delete(void*) noexcept;
void operator delete(void*, const std::nothrow_t&) noexcept;
void* operator new[](std::size_t);
void* operator new[](std::size_t, const std::nothrow_t&) noexcept;
void operator delete[](void*) noexcept;
void operator delete[](void*, const std::nothrow_t&) noexcept;

inline void* operator new(std::size_t, void* p) noexcept { return p; }
inline void* operator new[](std::size_t, void* p) noexcept { return p; }
inline void operator delete(void*, void*) noexcept {}
inline void operator delete[](void*, void*) noexcept {}

#endif /* _NEW_ */

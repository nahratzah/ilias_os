#ifndef _LIMITS_
#define _LIMITS_

#include <climits>

namespace std {


enum float_round_style {
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3
};

enum float_denorm_style {
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1
};

template<class T> class numeric_limits {
 public:
  static constexpr bool is_specialized = false;
  static constexpr T min() noexcept { return T(); }
  static constexpr T max() noexcept { return T(); }
  static constexpr T lowest() noexcept { return T(); }

  static constexpr int digits = 0;
  static constexpr int digits10 = 0;
  static constexpr int max_digits10 = 0;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = false;
  static constexpr bool is_exact = false;
  static constexpr int radix = 0;
  static constexpr T epsilon() noexcept { return T(); }
  static constexpr T round_error() noexcept { return T(); }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr T infinity() noexcept { return T(); }
  static constexpr T quiet_NaN() noexcept { return T(); }
  static constexpr T signaling_NaN() noexcept { return T(); }
  static constexpr T denorm_min() noexcept { return T(); }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = false;
  static constexpr bool is_modulo = false;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};

template<> class numeric_limits<bool> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr bool min() noexcept { return false; }
  static constexpr bool max() noexcept { return true; }
  static constexpr bool lowest() noexcept { return min(); }

  static constexpr int digits = 1;
  static constexpr int digits10 = 0;
  static constexpr int max_digits10 = 0;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr bool epsilon() noexcept { return 0; }
  static constexpr bool round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr bool infinity() noexcept { return 0; }
  static constexpr bool quiet_NaN() noexcept { return 0; }
  static constexpr bool signaling_NaN() noexcept { return 0; }
  static constexpr bool denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = false;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};

template<> class numeric_limits<char> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr char min() noexcept { return CHAR_MIN; }
  static constexpr char max() noexcept { return CHAR_MAX; }
  static constexpr char lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(char) * CHAR_BIT - (min() < 0 ? 1 : 0);
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
#ifdef __CHAR_UNSIGNED__
  static constexpr bool is_signed = false;
#else
  static constexpr bool is_signed = true;
#endif
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr char epsilon() noexcept { return 0; }
  static constexpr char round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr char infinity() noexcept { return 0; }
  static constexpr char quiet_NaN() noexcept { return 0; }
  static constexpr char signaling_NaN() noexcept { return 0; }
  static constexpr char denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<signed char> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr signed char min() noexcept { return SCHAR_MIN; }
  static constexpr signed char max() noexcept { return SCHAR_MAX; }
  static constexpr signed char lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(signed char) * CHAR_BIT - 1;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr signed char epsilon() noexcept { return 0; }
  static constexpr signed char round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr signed char infinity() noexcept { return 0; }
  static constexpr signed char quiet_NaN() noexcept { return 0; }
  static constexpr signed char signaling_NaN() noexcept { return 0; }
  static constexpr signed char denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<unsigned char> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr unsigned char min() noexcept { return 0; }
  static constexpr unsigned char max() noexcept { return UCHAR_MAX; }
  static constexpr unsigned char lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(unsigned char) * CHAR_BIT;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr unsigned char epsilon() noexcept { return 0; }
  static constexpr unsigned char round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr unsigned char infinity() noexcept { return 0; }
  static constexpr unsigned char quiet_NaN() noexcept { return 0; }
  static constexpr unsigned char signaling_NaN() noexcept { return 0; }
  static constexpr unsigned char denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<wchar16_t> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr wchar16_t min() noexcept { return ...; }
  static constexpr wchar16_t max() noexcept { return ...; }
  static constexpr wchar16_t lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(wchar16_t) * CHAR_BIT - (min() < 0 ? 1 : 0);
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = min() < wchar16_t(0);
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr wchar16_t epsilon() noexcept { return 0; }
  static constexpr wchar16_t round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr wchar16_t infinity() noexcept { return 0; }
  static constexpr wchar16_t quiet_NaN() noexcept { return 0; }
  static constexpr wchar16_t signaling_NaN() noexcept { return 0; }
  static constexpr wchar16_t denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<wchar32_t> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr wchar32_t min() noexcept { return ...; }
  static constexpr wchar32_t max() noexcept { return ...; }
  static constexpr wchar32_t lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(wchar32_t) * CHAR_BIT - (min() < 0 ? 1 : 0);
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = min() < wchar32_t(0);
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr wchar32_t epsilon() noexcept { return 0; }
  static constexpr wchar32_t round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr wchar32_t infinity() noexcept { return 0; }
  static constexpr wchar32_t quiet_NaN() noexcept { return 0; }
  static constexpr wchar32_t signaling_NaN() noexcept { return 0; }
  static constexpr wchar32_t denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<wchar_t> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr wchar_t min() noexcept { return ...; }
  static constexpr wchar_t max() noexcept { return ...; }
  static constexpr wchar_t lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(wchar_t) * CHAR_BIT - (min() < 0 ? 1 : 0);
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = min() < wchar_t(0);
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr wchar_t epsilon() noexcept { return 0; }
  static constexpr wchar_t round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr wchar_t infinity() noexcept { return 0; }
  static constexpr wchar_t quiet_NaN() noexcept { return 0; }
  static constexpr wchar_t signaling_NaN() noexcept { return 0; }
  static constexpr wchar_t denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};

template<> class numeric_limits<short> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr short min() noexcept { return SHRT_MIN; }
  static constexpr short max() noexcept { return SHRT_MAX; }
  static constexpr short lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(short) * CHAR_BIT - 1;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr short epsilon() noexcept { return 0; }
  static constexpr short round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr short infinity() noexcept { return 0; }
  static constexpr short quiet_NaN() noexcept { return 0; }
  static constexpr short signaling_NaN() noexcept { return 0; }
  static constexpr short denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<int> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr int min() noexcept { return INT_MIN; }
  static constexpr int max() noexcept { return INT_MAX; }
  static constexpr int lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(int) * CHAR_BIT - 1;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr int epsilon() noexcept { return 0; }
  static constexpr int round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr int infinity() noexcept { return 0; }
  static constexpr int quiet_NaN() noexcept { return 0; }
  static constexpr int signaling_NaN() noexcept { return 0; }
  static constexpr int denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<long> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr long min() noexcept { return LONG_MIN; }
  static constexpr long max() noexcept { return LONG_MAX; }
  static constexpr long lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(long) * CHAR_BIT - 1;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr long epsilon() noexcept { return 0; }
  static constexpr long round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr long infinity() noexcept { return 0; }
  static constexpr long quiet_NaN() noexcept { return 0; }
  static constexpr long signaling_NaN() noexcept { return 0; }
  static constexpr long denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<long long> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr long long min() noexcept { return LLONG_MIN; }
  static constexpr long long max() noexcept { return LLONG_MAX; }
  static constexpr long long lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(long long) * CHAR_BIT - 1;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr long long epsilon() noexcept { return 0; }
  static constexpr long long round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr long long infinity() noexcept { return 0; }
  static constexpr long long quiet_NaN() noexcept { return 0; }
  static constexpr long long signaling_NaN() noexcept { return 0; }
  static constexpr long long denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};

template<> class numeric_limits<unsigned short> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr unsigned short min() noexcept { return 0; }
  static constexpr unsigned short max() noexcept { return USHRT_MAX; }
  static constexpr unsigned short lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(unsigned short) * CHAR_BIT;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr unsigned short epsilon() noexcept { return 0; }
  static constexpr unsigned short round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr unsigned short infinity() noexcept { return 0; }
  static constexpr unsigned short quiet_NaN() noexcept { return 0; }
  static constexpr unsigned short signaling_NaN() noexcept { return 0; }
  static constexpr unsigned short denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<unsigned int> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr unsigned int min() noexcept { return 0; }
  static constexpr unsigned int max() noexcept { return UINT_MAX; }
  static constexpr unsigned int lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(unsigned int) * CHAR_BIT;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr unsigned int epsilon() noexcept { return 0; }
  static constexpr unsigned int round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr unsigned int infinity() noexcept { return 0; }
  static constexpr unsigned int quiet_NaN() noexcept { return 0; }
  static constexpr unsigned int signaling_NaN() noexcept { return 0; }
  static constexpr unsigned int denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<unsigned long> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr unsigned long min() noexcept { return 0; }
  static constexpr unsigned long max() noexcept { return ULONG_MAX; }
  static constexpr unsigned long lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(unsigned long) * CHAR_BIT;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr unsigned long epsilon() noexcept { return 0; }
  static constexpr unsigned long round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr unsigned long infinity() noexcept { return 0; }
  static constexpr unsigned long quiet_NaN() noexcept { return 0; }
  static constexpr unsigned long signaling_NaN() noexcept { return 0; }
  static constexpr unsigned long denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};
template<> class numeric_limits<unsigned long long> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr unsigned long long min() noexcept { return 0; }
  static constexpr unsigned long long max() noexcept { return ULLONG_MAX; }
  static constexpr unsigned long long lowest() noexcept { return min(); }

  static constexpr int digits = sizeof(unsigned long long) * CHAR_BIT;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = false;
  static constexpr bool is_integer = true;
  static constexpr bool is_exact = true;
  static constexpr int radix = 2;
  static constexpr unsigned long long epsilon() noexcept { return 0; }
  static constexpr unsigned long long round_error() noexcept { return 0; }

  static constexpr int min_exponent = 0;
  static constexpr int min_exponent10 = 0;
  static constexpr int max_exponent = 0;
  static constexpr int max_exponent10 = 0;

  static constexpr bool has_infinity = false;
  static constexpr bool has_quiet_NaN = false;
  static constexpr bool has_signaling_NaN = false;
  static constexpr float_denorm_style has_denorm = denorm_absent;
  static constexpr bool has_denorm_loss = false;
  static constexpr unsigned long long infinity() noexcept { return 0; }
  static constexpr unsigned long long quiet_NaN() noexcept { return 0; }
  static constexpr unsigned long long signaling_NaN() noexcept { return 0; }
  static constexpr unsigned long long denorm_min() noexcept { return 0; }

  static constexpr bool is_iec559 = false;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = true;

  static constexpr bool traps = false;
  static constexpr bool tinyness_before = false;
  static constexpr float_round_style round_style = round_toward_zero;
};

template<> class numeric_limits<float> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr float min() noexcept { return ...; }
  static constexpr float max() noexcept { return ...; }
  static constexpr float lowest() noexcept { return ...; }

  static constexpr int digits = FLT_MANT_DIG;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = false;
  static constexpr bool is_exact = false;
  static constexpr int radix = FLT_RADIX;
  static constexpr float epsilon() noexcept { return FLT_EPSILON; }
  static constexpr float round_error() noexcept { return ...; }

  static constexpr int min_exponent = FLT_MIN_EXP;
  static constexpr int min_exponent10 = FLT_MIN_10_EXP;
  static constexpr int max_exponent = FLT_MAX_EXP;
  static constexpr int max_exponent10 = FLT_MAX_10_EXP;

  static constexpr bool has_infinity = ...;
  static constexpr bool has_quiet_NaN = ...;
  static constexpr bool has_signaling_NaN = ...;
  static constexpr float_denorm_style has_denorm = ...;
  static constexpr bool has_denorm_loss = ...;
  static constexpr float infinity() noexcept { return ...; }
  static constexpr float quiet_NaN() noexcept { return ...; }
  static constexpr float signaling_NaN() noexcept { return ...; }
  static constexpr float denorm_min() noexcept { return ...; }

  static constexpr bool is_iec559 = ...;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = false;

  static constexpr bool traps = ...;
  static constexpr bool tinyness_before = ...;
  static constexpr float_round_style round_style = ...;
};
template<> class numeric_limits<double> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr double min() noexcept { return ...; }
  static constexpr double max() noexcept { return ...; }
  static constexpr double lowest() noexcept { return ...; }

  static constexpr int digits = DBL_MANT_DIG;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = false;
  static constexpr bool is_exact = false;
  static constexpr int radix = FLT_RADIX;
  static constexpr double epsilon() noexcept { return DBL_EPSILON; }
  static constexpr double round_error() noexcept { return ...; }

  static constexpr int min_exponent = DBL_MIN_EXP;
  static constexpr int min_exponent10 = DBL_MIN_10_EXP;
  static constexpr int max_exponent = DBL_MAX_EXP;
  static constexpr int max_exponent10 = DBL_MAX_10_EXP;

  static constexpr bool has_infinity = ...;
  static constexpr bool has_quiet_NaN = ...;
  static constexpr bool has_signaling_NaN = ...;
  static constexpr float_denorm_style has_denorm = ...;
  static constexpr bool has_denorm_loss = ...;
  static constexpr double infinity() noexcept { return ...; }
  static constexpr double quiet_NaN() noexcept { return ...; }
  static constexpr double signaling_NaN() noexcept { return ...; }
  static constexpr double denorm_min() noexcept { return ...; }

  static constexpr bool is_iec559 = ...;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = false;

  static constexpr bool traps = ...;
  static constexpr bool tinyness_before = ...;
  static constexpr float_round_style round_style = ...;
};
template<> class numeric_limits<long double> {
 public:
  static constexpr bool is_specialized = true;
  static constexpr long double min() noexcept { return ...; }
  static constexpr long double max() noexcept { return ...; }
  static constexpr long double lowest() noexcept { return ...; }

  static constexpr int digits = LDBL_MANT_DIG;
  static constexpr int digits10 = ...;
  static constexpr int max_digits10 = ...;
  static constexpr bool is_signed = true;
  static constexpr bool is_integer = false;
  static constexpr bool is_exact = false;
  static constexpr int radix = FLT_RADIX;
  static constexpr long double epsilon() noexcept { return LDBL_EPSILON; }
  static constexpr long double round_error() noexcept { return ...; }

  static constexpr int min_exponent = LDBL_MIN_EXP;
  static constexpr int min_exponent10 = LDBL_MIN_10_EXP;
  static constexpr int max_exponent = LDBL_MAX_EXP;
  static constexpr int max_exponent10 = LDBL_MAX_10_EXP;

  static constexpr bool has_infinity = ...;
  static constexpr bool has_quiet_NaN = ...;
  static constexpr bool has_signaling_NaN = ...;
  static constexpr float_denorm_style has_denorm = ...;
  static constexpr bool has_denorm_loss = ...;
  static constexpr long double infinity() noexcept { return ...; }
  static constexpr long double quiet_NaN() noexcept { return ...; }
  static constexpr long double signaling_NaN() noexcept { return ...; }
  static constexpr long double denorm_min() noexcept { return ...; }

  static constexpr bool is_iec559 = ...;
  static constexpr bool is_bounded = true;
  static constexpr bool is_modulo = false;

  static constexpr bool traps = ...;
  static constexpr bool tinyness_before = ...;
  static constexpr float_round_style round_style = ...;
};


} /* namespace std */

#endif /* _LIMITS_ */

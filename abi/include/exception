#ifndef _EXCEPTION_
#define _EXCEPTION_

#include <cstddef>
#include <type_traits>
#include <utility>

namespace std {


class exception {
 public:
  virtual ~exception() noexcept;
  virtual const char* what() const noexcept;
};

class bad_exception
: public exception
{
 public:
  ~bad_exception() noexcept override;
  const char* what() const noexcept override;
};

class exception_ptr {
 public:
  exception_ptr() = default;
  exception_ptr(nullptr_t) noexcept;
  exception_ptr(const exception_ptr&) noexcept;
  exception_ptr(exception_ptr&&) noexcept;
  exception_ptr& operator=(const exception_ptr&) noexcept;
  exception_ptr& operator=(exception_ptr&&) noexcept;

  ~exception_ptr() noexcept;

  inline explicit operator bool() const noexcept;
  inline bool operator==(const exception_ptr&) const noexcept;
  inline bool operator!=(const exception_ptr&) const noexcept;

  friend void rethrow_exception(exception_ptr) __attribute__((__noreturn__));

 private:
  void* ptr_ = nullptr;
};

class nested_exception {
 public:
  nested_exception() noexcept;
  nested_exception(const nested_exception&) = default;
  nested_exception& operator=(const nested_exception&) = default;
  virtual ~nested_exception() noexcept;

  void rethrow_nested() const __attribute__((__noreturn__));
  inline exception_ptr nested_ptr() const noexcept;

 private:
  exception_ptr nested_;
};


/* Implement std::unexpected. */
using unexpected_handler = void (*)();
unexpected_handler set_unexpected(unexpected_handler) noexcept;
unexpected_handler get_unexpected() noexcept;
void unexpected() noexcept __attribute__((__noreturn__));

/* Implement std::terminate. */
using terminate_handler = void (*)();
terminate_handler set_terminate(terminate_handler) noexcept;
terminate_handler get_terminate() noexcept;
void terminate() noexcept __attribute__((__noreturn__));

bool uncaught_exception() noexcept;

exception_ptr current_exception() noexcept;
template<typename E> exception_ptr make_exception_ptr(E e) noexcept;
template<typename T> void throw_with_nested(T&&) __attribute__((__noreturn__));
template<typename E> void rethrow_if_nested(const E&);


} /* namespace std */

#include <exception-inl.h>

#endif /* _EXCEPTION_ */

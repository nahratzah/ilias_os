#ifndef _NEW
#define _NEW


#include <exception>
#include <cstddef_misc/size_ptrdiff.h>


namespace std {


class bad_alloc
: public exception
{
 public:
  bad_alloc() noexcept;
  bad_alloc(const bad_alloc&) noexcept;
  bad_alloc& operator=(const bad_alloc&) noexcept;
  ~bad_alloc() noexcept override;
  const char* what() const noexcept override;
};

struct nothrow_t {};
extern const nothrow_t nothrow;
using new_handler = void (*)();
new_handler set_new_handler(new_handler) noexcept;
new_handler get_new_handler() noexcept;


} /* namespace std */


/* new/delete */
void* operator new(std::size_t);
void* operator new(std::size_t, const std::nothrow_t&) noexcept;
void operator delete(void*) noexcept;
void operator delete(void*, const std::nothrow_t&) noexcept;

/* array new/delete */
void* operator new[](std::size_t);
void* operator new[](std::size_t, const std::nothrow_t&) noexcept;
void operator delete[](void*) noexcept;
void operator delete[](void*, const std::nothrow_t&) noexcept;

/* placement new/delete */
inline void* operator new(std::size_t, void* p) noexcept { return p; }
inline void operator delete(void*, void* p) noexcept {}
inline void* operator new[](std::size_t, void* p) noexcept { return p; }
inline void operator delete[](void*, void* p) noexcept {}

void __throw_bad_alloc();


#endif /* _NEW */
